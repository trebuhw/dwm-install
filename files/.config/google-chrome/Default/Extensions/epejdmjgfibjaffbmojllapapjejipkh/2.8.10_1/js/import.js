function getChromeBookmarksFlatTree({startIdWith:startIdWith=0}){return new Promise(((yes,no)=>queryForImportFolder({selection:["SYNC4","_ID"]}).then((result=>{if(result&&1===result.length){const importedFolder={_ID:result[0]._ID,SYNC4:result[0].SYNC4};chrome.bookmarks.getTree((([root])=>{const browsername=getBrowserName().toLowerCase(),recurse=(node,flatTree=[],parent=null)=>{if(node.id=parseInt(node.id)+parseInt(startIdWith),node.SYNC4=createSYNC4({id:`${browsername}_${node.id}`,parent:`${browsername}_${node.parentId}`}),node.POSITION=node.index+1,parent?(node.parentId=parseInt(node.parentId)+parseInt(startIdWith),node.SYNC3=parent?parent.SYNC4:null):(node.SYNC3=importedFolder.SYNC4,node.parentId=parseInt(importedFolder._ID)),!node.children||0===node.children.length)return[...flatTree,node];if(node.children.length>0){let _flatTree=flatTree;return node.id!=startIdWith+0&&(_flatTree=[..._flatTree,Object.assign({},node,{children:void 0})]),node.children.forEach((n=>_flatTree=recurse(n,_flatTree,node.id!=startIdWith+0?node:null))),_flatTree}},flattenTree=recurse(root);yes(flattenTree)}))}else SamsungSCloudSyncService.SyncLogs.log("imported folder not found"),no("imported folder not found")}))))}function prepareFlatTree(flatTree){return new Promise(((yes,no)=>{const SERVER_TIMESTAMP=getServerTimeStampValue();yes(flatTree.map((data=>(data._ID=data.id,data.PARENT=data.parentId||0,data.SOURCEID=data.PARENT,data.DIRTY=1,data.CREATED=SERVER_TIMESTAMP,data.MODIFIED=SERVER_TIMESTAMP,data.TITLE=sanitizeTitle(data.title),data.URL=data.url,data.FOLDER=data.url?0:1,data.SYNC5=SERVER_TIMESTAMP,data.DEVICE_ID=EXT_DEVICE_ID,data.DEVICE_NAME=EXT_DEVICE_NAME,data.IS_DELETED="0",data.BOOKMARK_ID=data._ID,data.ACCOUNT_NAME=storageLocalApi.getItem("ACCOUNT_NAME"),data.ACCOUNT_TYPE=storageLocalApi.getItem("ACCOUNT_TYPE"),delete data.id,delete data.title,delete data.url,delete data.parentId,delete data.children,delete data.index,delete data.dateAdded,delete data.dateGroupModified,data))))}))}function deleteImportedBookmarks({SYNC4:SYNC4}){return DB.Query.bookmarks({selection:["_ID","PARENT","SYNC3","SYNC4"]}).then((bookmarks=>{if(bookmarks&&bookmarks.length>0){const importedRoot=(bookmarks=Array.from(bookmarks)).find((e=>e.SYNC4==SYNC4));if(importedRoot){const recurse=SYNC4=>{let ids=[SYNC4];const _recurse=node=>{const children=bookmarks.filter((b=>b.SYNC3==node.SYNC4));children&&children.length>0&&(ids=[...ids,...children.map((e=>e.SYNC4))],children.forEach((c=>_recurse(c))))};return _recurse(importedRoot),ids.filter((e=>e!=SYNC4))};let ids=recurse(SYNC4);if(ids.length>0){ids=ids.map((id=>`"${id}"`)).join(","),SamsungSCloudSyncService.SyncLogs.log(`Deleting following SYNC4s (${ids.split(",").length}) [${ids}]`);const SERVER_TIMESTAMP=getServerTimeStampValue();return DB.Update.bookmarks({newData:{DIRTY:1,IS_DELETED:"1",SYNC5:SERVER_TIMESTAMP,MODIFIED:SERVER_TIMESTAMP},where:{ins:[{key:"SYNC4",value:ids.replace(/"/g,"").split(",")}]}}).then((e=>syncAndCallback()))}return SamsungSCloudSyncService.SyncLogs.log("Nothing to delete"),Promise.resolve(0)}return SamsungSCloudSyncService.SyncLogs.log("No imported bookmarks"),Promise.resolve(0)}return SamsungSCloudSyncService.SyncLogs.log("No bookmarks in DB"),Promise.resolve(0)}))}function insertImportedFolder({_ID:_ID,SERVER_TIMESTAMP:SERVER_TIMESTAMP}){const browserName=getBrowserName(),browsername=browserName.toLowerCase(),SYNC4=createSYNC4({id:`${browsername}_${_ID}`,parent:`${browsername}_0`});return SamsungSCloudSyncService.SyncLogs.log(`Inserting folder with SYNC4 = ${SYNC4} at _ID = ${_ID}`),DB.Delete.bookmarks({where:{equals:[{key:"_ID",value:_ID}]}}).then((()=>DB.Insert.bookmarks({data:{_ID:_ID,TITLE:`${browserName} Bookmarks`,BOOKMARK_ID:_ID,SOURCEID:0,PARENT:0,FOLDER:"1",DIRTY:1,IS_DELETED:"0",SYNC4:SYNC4,POSITION:IMPORTED_FOLDER_POSITION,CREATED:SERVER_TIMESTAMP,MODIFIED:SERVER_TIMESTAMP,SYNC5:SERVER_TIMESTAMP,DEVICE_ID:EXT_DEVICE_ID,DEVICE_NAME:EXT_DEVICE_NAME,ACCOUNT_NAME:storageLocalApi.getItem("ACCOUNT_NAME"),ACCOUNT_TYPE:storageLocalApi.getItem("ACCOUNT_TYPE")}})))}function importLocalBookmarksAndReplace({_ID:_ID}){const SERVER_TIMESTAMP=getServerTimeStampValue();return SamsungSCloudSyncService.SyncLogs.log("Beginning to import bookmarks"),queryForImportFolder({selection:["_ID","SYNC3","SYNC4"]}).then((results=>{SamsungSCloudSyncService.SyncLogs.log("Queried for imported bookmarks' root folder");const exists=results&&1===results.length;return SamsungSCloudSyncService.SyncLogs.log(`Looked for existence of folder : ${exists}`),exists?deleteImportedBookmarks({SYNC4:results[0].SYNC4}):insertImportedFolder({_ID:_ID,SERVER_TIMESTAMP:SERVER_TIMESTAMP})})).then((e=>(SamsungSCloudSyncService.SyncLogs.log("Looking for max id in DB"),DB.Max.bookmarks({key:"_ID"})))).then((MAX_ID=>{const startIdWith=parseInt(MAX_ID)<1?0:parseInt(MAX_ID);return SamsungSCloudSyncService.SyncLogs.log(`Got max id in DB ${startIdWith}`),getChromeBookmarksFlatTree({startIdWith:startIdWith})})).then((flatTree=>(SamsungSCloudSyncService.SyncLogs.log("Flattening tree"),prepareFlatTree(flatTree)))).then((preparedFlatTree=>new Promise(((yes,no)=>{SamsungSCloudSyncService.SyncLogs.log("Got flatted tree"),Promise.all(preparedFlatTree.map((data=>DB.Insert.bookmarks({data:data})))).then((()=>yes(preparedFlatTree.length)))})))).catch((error=>{console.log("(importLocalBookmarksAndReplace) Error: ",error)}))}function importLocalBookmarksAndOverwrite({_ID:_ID}){const flattenSubTree=(node,parent,startIdWith)=>{const flatTree=[],recurse=(node,parent)=>{let _node=Object.assign({},node,{children:void 0}),browsername=getBrowserName().toLowerCase();_node.id=parseInt(_node.id)+parseInt(startIdWith),_node.SYNC4=createSYNC4({id:`${browsername}_${_node.id}`,parent:`${browsername}_${_node.parentId}`}),_node.POSITION=_node.index+1,_node.SYNC3=parent.SYNC4,_node.parentId=parseInt(parent._ID),_node.title=sanitizeTitle(_node.title),_node=(node=>{const SERVER_TIMESTAMP=getServerTimeStampValue();return node._ID=node.id,node.PARENT=node.parentId?parseInt(node.parentId):0,node.SOURCEID=node.PARENT,node.DIRTY=1,node.CREATED=SERVER_TIMESTAMP,node.MODIFIED=SERVER_TIMESTAMP,node.TITLE=sanitizeTitle(node.title),node.URL=node.url||"",node.FOLDER=node.url?0:1,node.SYNC5=SERVER_TIMESTAMP,node.DEVICE_ID=EXT_DEVICE_ID,node.DEVICE_NAME=EXT_DEVICE_NAME,node.IS_DELETED="0",node.BOOKMARK_ID=node._ID,node.ACCOUNT_NAME=storageLocalApi.getItem("ACCOUNT_NAME"),node.ACCOUNT_TYPE=storageLocalApi.getItem("ACCOUNT_TYPE"),delete node.id,delete node.title,delete node.url,delete node.parentId,delete node.children,delete node.index,delete node.dateAdded,delete node.dateGroupModified,node})(_node),flatTree.push(_node),node.children&&node.children.length>0&&node.children.forEach((c=>recurse(c,_node)))};return recurse(node,parent),flatTree};return queryForImportFolder({selection:["_ID"]}).then((results=>{SamsungSCloudSyncService.SyncLogs.log("Queried for imported bookmarks' root folder");const exists=results&&1===results.length,SERVER_TIMESTAMP=getServerTimeStampValue();return SamsungSCloudSyncService.SyncLogs.log(`Looked for existence of folder : ${exists}`),exists?Promise.resolve(0):insertImportedFolder({_ID:_ID,SERVER_TIMESTAMP:SERVER_TIMESTAMP})})).then((e=>{SamsungSCloudSyncService.SyncLogs.log("Getting previously imported Bookmarks");const recurse=(parent,depth=0,SamsungBookmarks={})=>new Promise((yes=>DB.Query.bookmarks({selection:["_ID","SYNC4","TITLE","URL","FOLDER"],where:{equals:[{key:"PARENT",value:parent._ID},{key:"SYNC3",value:parent.SYNC4},{key:"IS_DELETED",value:"0"},{key:"DIRTY",value:0}]}}).then((bookmarks=>{const key=`${depth}-${sanitizeTitle(parent.TITLE)}`;[...bookmarks].forEach((b=>SamsungBookmarks[key]?SamsungBookmarks[key].push(b):SamsungBookmarks[key]=[b])),Promise.all([...bookmarks].map((b=>1==b.FOLDER?recurse(b,depth+1,SamsungBookmarks):Promise.resolve(SamsungBookmarks)))).then((()=>yes(SamsungBookmarks)))}))));return queryForImportFolder({selection:["_ID","SYNC4","TITLE","URL","FOLDER"]}).then((([bookmark])=>recurse(bookmark).then((SamsungBookmarks=>Promise.resolve({SamsungBookmarks:SamsungBookmarks,importedFolder:bookmark})))))})).then((({SamsungBookmarks:SamsungBookmarks,importedFolder:importedFolder})=>new Promise((yes=>{SamsungSCloudSyncService.SyncLogs.log("Getting latest Chrome Bookmarks"),chrome.bookmarks.getTree((([ChromeBookmarks])=>yes({SamsungBookmarks:SamsungBookmarks,ChromeBookmarks:ChromeBookmarks,importedFolder:importedFolder})))})))).then((({SamsungBookmarks:SamsungBookmarks,ChromeBookmarks:ChromeBookmarks,importedFolder:importedFolder})=>(SamsungSCloudSyncService.SyncLogs.log("Looking for max id in DB"),DB.Max.bookmarks({key:"_ID"}).then((MAX_ID=>Promise.resolve({SamsungBookmarks:SamsungBookmarks,ChromeBookmarks:ChromeBookmarks,importedFolder:importedFolder,MAX_ID:parseInt(MAX_ID)<1?0:parseInt(MAX_ID)})))))).then((({SamsungBookmarks:SamsungBookmarks,ChromeBookmarks:ChromeBookmarks,MAX_ID:MAX_ID,importedFolder:importedFolder})=>{SamsungSCloudSyncService.SyncLogs.log("Starting diff algorithm");let toInsert=[];const rootFolder={inChrome:{title:importedFolder.TITLE},inSamsung:importedFolder},recurse=(node,parent=rootFolder,depth=-1)=>{if(-1===depth)node.children.forEach((c=>recurse(c,parent,depth+1)));else{const mapChunk=SamsungBookmarks[`${depth}-${parent.inChrome.title}`],inSamsung=mapChunk&&mapChunk.find((e=>sanitizeTitle(e.TITLE)===sanitizeTitle(node.title)&&(1==e.FOLDER||e.URL==node.url))),isFolder=!node.url&&node.children&&node.children.length>0;inSamsung?isFolder&&node.children.forEach((c=>recurse(c,{inChrome:node,inSamsung:inSamsung},depth+1))):toInsert=[...toInsert,...flattenSubTree(node,parent.inSamsung,MAX_ID)]}};return recurse(ChromeBookmarks),SamsungSCloudSyncService.SyncLogs.log(`Found ${toInsert.length} new bookmarks to add`),Promise.resolve(toInsert)})).then((toInsert=>new Promise((yes=>{Promise.all(toInsert.map((data=>DB.Insert.bookmarks({data:data})))).then((e=>yes(toInsert.length)))})))).catch((error=>{console.log("(importLocalBookmarksAndOverwrite) Error: ",error)}))}function syncAndCallback(){return new Promise(((yes,no)=>{chrome.storage.local.onChanged.addListener((event=>{Object.keys(event).forEach((key=>{event[key].newValue===SYNC_COMPLETED&&yes()}))})),SamsungSCloudSyncService.BrowserOverlay.refreshSyncProcess()}))}