function AbstractSyncAdapter(cloudServiceManager){this.SYNC_META_DATA="SyncMetaData",this.SYNC_BASE_KEY="DATASYNC",this.TOO_OLD_TIME_STAMP=20002,this.TOO_YOUNG_TIME_STAMP=29006,this.UPDATE_TO_SERVER=0,this.DELETE_FROM_SERVER=1,this.SIZE=30,this.GET_KEYS_SIZE=1500,cloudServiceManager&&(this.mServiceManager=cloudServiceManager),SamsungSCloudSyncService.mContentProvider=SamsungSCloudSyncService.mContentProvider||new ContentProvider,SamsungSCloudSyncService.mSyncConstants=SamsungSCloudSyncService.mSyncConstants||new SyncConstants,SamsungSCloudSyncService.mICloudServiceManager=SamsungSCloudSyncService.mICloudServiceManager||new ICloudServiceManager,SamsungSCloudSyncService.mServerCommonConstants=SamsungSCloudSyncService.mServerCommonConstants||new ServerCommonConstants,SamsungSCloudSyncService.mBrowserConstants=SamsungSCloudSyncService.mBrowserConstants||new BrowserConstants,SamsungSCloudSyncService.mClientDeviceId&&!SamsungSCloudSyncService.mClientDeviceId.match(SamsungSCloudSyncService.OLD_SYNC_KEY)||(SamsungSCloudSyncService.mAppTool=SamsungSCloudSyncService.mAppTool||new AppTool,SamsungSCloudSyncService.mClientDeviceId=SamsungSCloudSyncService.mAppTool.getClientDeviceId()),this.mServerChangedRecords=new Hash,this.mLastSyncTime=null,this.serverTimeStamp=null,this.mbSyncCanceled=!1,this.mBuilder=null,this.respItems=[],this.mTimeManager=new TimeManager,AbstractSyncAdapterGlobal=this,AbstractSyncAdapterGlobal.mLastSyncTime=null,this.getSyncAdapterName=function(){},this.getContentUri=function(){},this.getDeletedColumnName=function(){},this.getKeyColumnName=function(){},this.getIdColumnName=function(){},this.getDirtyColumnName=function(){},this.getBuilder=function(){},this.getCallerSyncAdapter=function(){},this.getAccountName=function(){},this.getAccountType=function(){},this.getTag=function(){},this.getCid=function(){},this.getCtidKey=function(){},this.getTimeStampColumnName=function(){},this.getProvider=function(){return SamsungSCloudSyncService.mContentProvider},this.getLocalUpdatesSelection=function(){return`${AbstractSyncAdapterGlobal.getDirtyColumnName()} = 1`},this.getLocalUpdatesSortOrder=function(){return`${AbstractSyncAdapterGlobal.getDeletedColumnName()} DESC`},this.getLocalUpdatesAccDetails=function(){return`${AbstractSyncAdapterGlobal.getAccountName()} = '${SamsungSCloudSyncService.mSyncConstants.ACCOUNT_NAME}' AND ${AbstractSyncAdapterGlobal.getAccountType()} = '${SamsungSCloudSyncService.mSyncConstants.ACCOUNT_TYPE}'`},this.getSplitServerChangeSize=function(){return 100},this.getLocalupdatesUri=function(){return AbstractSyncAdapterGlobal.getContentUri()},this.doUpdateDelete=function(kvsItem,recordItem,stats){if(AbstractSyncAdapterGlobal.getProvider().Delete(AbstractSyncAdapterGlobal.getContentUri(),{equals:[{key:AbstractSyncAdapterGlobal.getIdColumnName(),value:kvsItem.getID()}]},null),!recordItem.isDeleted()){const data=record.getValue();if(null==data||0==data.length)return!1;AbstractSyncAdapterGlobal.mBuilder||(AbstractSyncAdapterGlobal.mBuilder=AbstractSyncAdapterGlobal.getBuilder()),AbstractSyncAdapterGlobal.mBuilder.insert(data,record.getKEY(),record.getTimeStamp())}return!0},this.doInsert=function(kvsItem,recordItem,stats,cb){const data=recordItem.getValue();if(null==data||0==data.length)return!1;null==AbstractSyncAdapterGlobal.mBuilder&&(AbstractSyncAdapterGlobal.mBuilder=AbstractSyncAdapterGlobal.getBuilder());return AbstractSyncAdapterGlobal.mBuilder.insert(data,recordItem.getKEY(),recordItem.getTimeStamp(),cb),!0},this.fixParentIdsUpdateCallback=async function(){if(AbstractSyncAdapterGlobal.fixParentIdsUpdateOps=[],AbstractSyncAdapterGlobal.mbSyncCanceled)return void SamsungSCloudSyncService.SyncLogs.log("fixParentIdsUpdateCallback SYNC_CANCELLED");null!=AbstractSyncAdapterGlobal.mLastSyncTime&&null!=AbstractSyncAdapterGlobal.serverTimeStamp&&(await storageLocalApi.setItem(AbstractSyncAdapterGlobal.getSyncAdapterName(),AbstractSyncAdapterGlobal.serverTimeStamp),SamsungSCloudSyncService.SyncLogs.log(`Save Last Sync Time (serverTimeStamp): ${AbstractSyncAdapterGlobal.serverTimeStamp}`),SamsungSCloudSyncService.SyncLogs.log(`mLastSyncTime: ${AbstractSyncAdapterGlobal.mLastSyncTime}`));0==AbstractSyncAdapterGlobal.mServerChangedRecords.size()?null!=AbstractSyncAdapterGlobal.mServiceManager.getAuthManager()?(AbstractSyncAdapterGlobal.serviceEndCallbackFromNetworkClient=AbstractSyncAdapterGlobal.serviceEndCallbackFromNetworkClient.bind(AbstractSyncAdapterGlobal),AbstractSyncAdapterGlobal.serviceEndCallbackFromNetworkClient()):SamsungSCloudSyncService.SyncLogs.log("No Auth Info.. Can not call cloud-end"):(SamsungSCloudSyncService.SyncLogs.log("updateLocalDb Again"),AbstractSyncAdapterGlobal.updateLocalDb())},this.fixParentIdsQueryCallback=function(cursor){if(null==cursor||void 0===cursor.length||0==cursor.length)return AbstractSyncAdapterGlobal.fixParentIdsUpdateCallback();getBrowserName().toUpperCase();const notUndefined=x=>void 0!==x,items=[...cursor].filter((({_ID:_ID,SYNC4:SYNC4})=>[_ID,SYNC4].every(notUndefined)));AbstractSyncAdapterGlobal.fixParentIdsUpdateOps=[],DB.Query.bookmarks({selection:["_ID","SYNC4"],where:{ins:[{key:"_ID",value:[IMPORTED_FOLDER_IDS.CHROME,IMPORTED_FOLDER_IDS.EDGE,IMPORTED_FOLDER_IDS.OPERA]}]}}).then((importFolders=>{let hasUpdatedBefore={CHROME:!1,EDGE:!1,OPERA:!1};const importFolderKeys=importFolders.length?Object.keys(importFolders):[],hasImported={CHROME:!1,EDGE:!1,OPERA:!1};importFolderKeys.forEach((key=>{Object.keys(hasImported).forEach((folder=>{hasImported[folder]=!hasImported[folder]&&importFolders[key]._ID==IMPORTED_FOLDER_IDS[folder]}))})),items.forEach((({_ID:parentId,SYNC4:parentKey})=>{Object.keys(hasImported).forEach((key=>{parentKey.indexOf(importFolderSYNC4EndsFromKey(key))>=0&&!hasImported[key]&&!hasUpdatedBefore[key]&&(AbstractSyncAdapterGlobal.fixParentIdsUpdateOps.push(new BatchOperation("UPDATE",AbstractSyncAdapterGlobal.getContentUri(),{_ID:IMPORTED_FOLDER_IDS[key]},{equals:[{key:SamsungSCloudSyncService.mBrowserConstants.BOOKMARKS.SYNC4,value:parentKey}]},null,null)),parentId=IMPORTED_FOLDER_IDS[key],hasUpdatedBefore[key]=!0)}));const values={[SamsungSCloudSyncService.mBrowserConstants.BOOKMARKS.PARENT]:parentId};AbstractSyncAdapterGlobal.fixParentIdsUpdateOps.push(new BatchOperation("UPDATE",AbstractSyncAdapterGlobal.getContentUri(),values,{equals:[{key:SamsungSCloudSyncService.mBrowserConstants.BOOKMARKS.SYNC3,value:parentKey}]},null,null))})),AbstractSyncAdapterGlobal.getProvider().applyBatch(AbstractSyncAdapterGlobal.fixParentIdsUpdateOps,AbstractSyncAdapterGlobal.fixParentIdsUpdateCallback)}))},this.fixParentIds=function(){const projection=[AbstractSyncAdapterGlobal.getIdColumnName(),SamsungSCloudSyncService.mBrowserConstants.BOOKMARKS.SYNC4],where={equals:[{key:SamsungSCloudSyncService.mBrowserConstants.BOOKMARKS.IS_FOLDER,value:1},{key:AbstractSyncAdapterGlobal.getAccountName(),value:SamsungSCloudSyncService.mSyncConstants.ACCOUNT_NAME},{key:AbstractSyncAdapterGlobal.getAccountType(),value:SamsungSCloudSyncService.mSyncConstants.ACCOUNT_TYPE}]};SamsungSCloudSyncService.mContentProvider.Query(AbstractSyncAdapterGlobal.getContentUri(),projection,where,null,null,AbstractSyncAdapterGlobal.fixParentIdsQueryCallback)},this.updateLocalDb=function(){let downloadSize=0;null==AbstractSyncAdapterGlobal.mBuilder&&(AbstractSyncAdapterGlobal.mBuilder=AbstractSyncAdapterGlobal.getBuilder());AbstractSyncAdapterGlobal.itemsKeys=[],AbstractSyncAdapterGlobal.itemsStart=0,AbstractSyncAdapterGlobal.itemsEnd=0,SamsungSCloudSyncService.SyncLogs.log(`mServerChangedRecords Size = ${AbstractSyncAdapterGlobal.mServerChangedRecords.size()}`),AbstractSyncAdapterGlobal.mServerChangedRecords.each(((keys,values)=>{AbstractSyncAdapterGlobal.itemsKeys.push(keys),downloadSize+=values.getSize()})),AbstractSyncAdapterGlobal.itemsKeys.length>0&&AbstractSyncAdapterGlobal.getItemsFromKeys();0==AbstractSyncAdapterGlobal.mServerChangedRecords.size()&&AbstractSyncAdapterGlobal.cloudServiceEnd()},this.getItemsFromKeys=function(){if(AbstractSyncAdapterGlobal.itemsEnd=AbstractSyncAdapterGlobal.itemsStart+AbstractSyncAdapterGlobal.SIZE,AbstractSyncAdapterGlobal.mbSyncCanceled)return void SamsungSCloudSyncService.SyncLogs.log("SYNC_CANCELLED");try{if(AbstractSyncAdapterGlobal.itemsKeys.length<AbstractSyncAdapterGlobal.itemsEnd&&(AbstractSyncAdapterGlobal.itemsEnd=AbstractSyncAdapterGlobal.itemsKeys.length),AbstractSyncAdapterGlobal.itemsEnd==AbstractSyncAdapterGlobal.itemsStart)return SamsungSCloudSyncService.SyncLogs.log("Get Items are completed"),void(null!=AbstractSyncAdapterGlobal.mServerChangedRecords&&0!=AbstractSyncAdapterGlobal.mServerChangedRecords.size()?(SamsungSCloudSyncService.SyncLogs.log("updateLocalDb"),AbstractSyncAdapterGlobal.updateLocalDb()):AbstractSyncAdapterGlobal.cloudServiceEnd());console.log(`Start: ${Date.now()}`);const recordServiceManager=AbstractSyncAdapterGlobal.getCloudServiceManager();AbstractSyncAdapterGlobal.getItemsCallback=AbstractSyncAdapterGlobal.getItemsCallback.bind(AbstractSyncAdapterGlobal),AbstractSyncAdapterGlobal.respItems=[];const itemsKeys=JSON.parse(JSON.stringify(AbstractSyncAdapterGlobal.itemsKeys));for(;itemsKeys.length>0;){let chunk=itemsKeys.splice(0,AbstractSyncAdapterGlobal.SIZE);recordServiceManager.getRecordServiceManager().getItems(chunk,AbstractSyncAdapterGlobal.getItemsCallback)}}catch(e){SamsungSCloudSyncService.SyncLogs.log(`getItemsFromKeys: UpdateLocalDb: Sync exception recieved :- ${e}`)}},this.getItemsCallback=function(itemResponse){if(0==itemResponse.getResponseCode()){let dataRecords=itemResponse.getItemDetailsList();if(AbstractSyncAdapterGlobal.respItems.push(...dataRecords),AbstractSyncAdapterGlobal.respItems.length<AbstractSyncAdapterGlobal.itemsKeys.length)return;if(null==AbstractSyncAdapterGlobal.respItems||0==AbstractSyncAdapterGlobal.respItems.length)return SamsungSCloudSyncService.SyncLogs.log("UpdateLocalDb: No records for KEY List "),void(null!=AbstractSyncAdapterGlobal.mServerChangedRecords&&0!=AbstractSyncAdapterGlobal.mServerChangedRecords.size()?(SamsungSCloudSyncService.SyncLogs.log("updateLocalDb"),AbstractSyncAdapterGlobal.updateLocalDb()):AbstractSyncAdapterGlobal.cloudServiceEnd());let insertedItems=0;for(let record=0;record<AbstractSyncAdapterGlobal.respItems.length;record++){var item=AbstractSyncAdapterGlobal.mServerChangedRecords.get(AbstractSyncAdapterGlobal.respItems[record].getKEY());if(null!=item){if(AbstractSyncAdapterGlobal.mbSyncCanceled)return void SamsungSCloudSyncService.SyncLogs.log("getItemsCallback: SYNC_CANCELLED");if(item.getID()>0||Object.keys(IMPORTED_FOLDER_IDS).some((k=>IMPORTED_FOLDER_IDS[k]===item.getID()))){if(!AbstractSyncAdapterGlobal.doUpdateDelete(item,AbstractSyncAdapterGlobal.respItems[record],null)){AbstractSyncAdapterGlobal.mServerChangedRecords.unset(AbstractSyncAdapterGlobal.respItems[record].getKEY());continue}}else if(!AbstractSyncAdapterGlobal.respItems[record].isDeleted()){insertedItems++;const recordToAdd=AbstractSyncAdapterGlobal.respItems[record];if(!AbstractSyncAdapterGlobal.doInsert(item,recordToAdd,null,(e=>partialLoadCallback(e,recordToAdd)))){AbstractSyncAdapterGlobal.mServerChangedRecords.unset(AbstractSyncAdapterGlobal.respItems[record].getKEY());continue}}if(AbstractSyncAdapterGlobal.mbSyncCanceled)return void SamsungSCloudSyncService.SyncLogs.log("getItemsCallback: SYNC_CANCELLED");AbstractSyncAdapterGlobal.mServerChangedRecords.unset(AbstractSyncAdapterGlobal.respItems[record].getKEY())}else SamsungSCloudSyncService.SyncLogs.log(`GetItems returned a key which isn't found in list of serverkeys.Key = ${AbstractSyncAdapterGlobal.respItems[record].getKEY()}`),AbstractSyncAdapterGlobal.mServerChangedRecords.unset(AbstractSyncAdapterGlobal.respItems[record].getKEY())}AbstractSyncAdapterGlobal.respItems=[]}null!=AbstractSyncAdapterGlobal.mServerChangedRecords&&0!=AbstractSyncAdapterGlobal.mServerChangedRecords.size()?(SamsungSCloudSyncService.SyncLogs.log("getItemsCallback: updateLocalDb"),AbstractSyncAdapterGlobal.updateLocalDb()):(SamsungSCloudSyncService.SyncLogs.log("getItemsCallback: inside else case of itemsKeys.length > else case"),AbstractSyncAdapterGlobal.cloudServiceEnd())},this.doApplyBatch=function(operations){if(null==operations)return;null==AbstractSyncAdapterGlobal.mBuilder&&(AbstractSyncAdapterGlobal.mBuilder=AbstractSyncAdapterGlobal.getBuilder());let start=0;const size=operations.length,maxBatchSize=AbstractSyncAdapterGlobal.mBuilder.getBatchSize();let end=0,subOperations=[];for(;size>start;){end=start+maxBatchSize,size<end&&(end=size),subOperations=[];const finalOperations=subOperations.concat(operations.slice(start,end));AbstractSyncAdapterGlobal.getProvider().applyBatch(finalOperations,AbstractSyncAdapterGlobal.doApplyBatchCallback),start=end}},this.doApplyBatchCallback=function(){SamsungSCloudSyncService.SyncLogs.log("doApplyBatchCallback is called"),AbstractSyncAdapterGlobal.updateKeyOperation=[],AbstractSyncAdapterGlobal.updatetoServer(AbstractSyncAdapterGlobal.recordstoSetList,AbstractSyncAdapterGlobal.recordsToDeleteList)},this.getServerUpdates=function(){AbstractSyncAdapterGlobal.ServerChanges=new Hash,AbstractSyncAdapterGlobal.getServerUpdate(AbstractSyncAdapterGlobal.ServerChanges)},this.getServerUpdate=function(ServerChanges){if(SamsungSCloudSyncService.SyncLogs.log(`getServerUpdate:: mLastSyncTime:${AbstractSyncAdapterGlobal.mLastSyncTime}`),null==AbstractSyncAdapterGlobal.mLastSyncTime)return AbstractSyncAdapterGlobal.getAllkeys(ServerChanges,"");return AbstractSyncAdapterGlobal.getAllUpdates(ServerChanges,null)},this.handleError=function(responseCode,serverChanges){switch(responseCode){case this.TOO_YOUNG_TIME_STAMP:case this.TOO_OLD_TIME_STAMP:return getAllkeys(serverChanges,"",!0);default:SamsungSCloudSyncService.SyncLogs.log(`handleError: GetUpdates returned unHandled response code = ${responseCode}`)}return null},this.getAllUpdates=function(ServerChanges,nextKey){SamsungSCloudSyncService.startKey=null;const recordServiceManager=this.getCloudServiceManager();this.getUpdatesCallbackFromNetworkClient=this.getUpdatesCallbackFromNetworkClient.bind(this),recordServiceManager.getRecordServiceManager().getUpdates(AbstractSyncAdapterGlobal.mLastSyncTime,nextKey,this.GET_KEYS_SIZE,this.getUpdatesCallbackFromNetworkClient)},this.getUpdatesCallbackFromNetworkClient=function(response){0==response.getResponseCode()?(AbstractSyncAdapterGlobal.addToDownloadKeyList(response,AbstractSyncAdapterGlobal.ServerChanges),SamsungSCloudSyncService.startKey=response.getNextKey(),AbstractSyncAdapterGlobal.mLastSyncTime=response.getMaxTimeStamp(),SamsungSCloudSyncService.SyncLogs.log(`getUpdatesCallbackFromNetworkClient: mLastSyncTime${AbstractSyncAdapterGlobal.mLastSyncTime}`)):SamsungSCloudSyncService.SyncLogs.log(`getUpdatesCallbackFromNetworkClient: GetKeys returned${response.getResponseCode()}`);if(null!=SamsungSCloudSyncService.startKey&&0!=SamsungSCloudSyncService.startKey.length)AbstractSyncAdapterGlobal.getAllUpdates(AbstractSyncAdapterGlobal.ServerChanges,SamsungSCloudSyncService.startKey);else if(""==response.getNextKey()){const splitServerChanges=new Hash;let finalServerChanges=new Hash,splitSize=0;AbstractSyncAdapterGlobal.ServerChanges.each(((keys,values)=>{splitSize++,splitServerChanges.set(keys,values)})),AbstractSyncAdapterGlobal.removePreSyncedRecords(splitServerChanges),finalServerChanges=splitServerChanges,0==AbstractSyncAdapterGlobal.mServerChangedRecords.size()?AbstractSyncAdapterGlobal.mServerChangedRecords=finalServerChanges:finalServerChanges.each(((keys,values)=>{AbstractSyncAdapterGlobal.mServerChangedRecords.set(keys,values)})),SamsungSCloudSyncService.SyncLogs.log(`Server Records Size = ${AbstractSyncAdapterGlobal.mServerChangedRecords.size()}`),1==SamsungSCloudSyncService.Once&&(SamsungSCloudSyncService.Once=0,AbstractSyncAdapterGlobal.getServerUpdatesCallback())}},this.getAllkeys=getAllkeys,this.getKeysCallbackFromNetworkClient=function(response){0==response.getResponseCode()?(AbstractSyncAdapterGlobal.addToDownloadKeyList(response,AbstractSyncAdapterGlobal.ServerChanges),SamsungSCloudSyncService.startKey=response.getNextKey(),AbstractSyncAdapterGlobal.mLastSyncTime=response.getMaxTimeStamp(),SamsungSCloudSyncService.SyncLogs.log(`GetKeys mLastSyncTime: ${AbstractSyncAdapterGlobal.mLastSyncTime}`)):SamsungSCloudSyncService.SyncLogs.log(`GetKeys returned${response.getResponseCode()}`);if(null!=response.getNextKey()&&0!=response.getNextKey().length)AbstractSyncAdapterGlobal.getAllkeys(AbstractSyncAdapterGlobal.ServerChanges,SamsungSCloudSyncService.startKey);else if(""==response.getNextKey()){const splitServerChanges=new Hash;let finalServerChanges=new Hash,splitSize=0;AbstractSyncAdapterGlobal.ServerChanges.each(((keys,values)=>{splitSize++,splitServerChanges.set(keys,values)})),AbstractSyncAdapterGlobal.removePreSyncedRecords(splitServerChanges),finalServerChanges=splitServerChanges,0==AbstractSyncAdapterGlobal.mServerChangedRecords.size()?AbstractSyncAdapterGlobal.mServerChangedRecords=finalServerChanges:finalServerChanges.each(((keys,values)=>{AbstractSyncAdapterGlobal.mServerChangedRecords.set(keys,values)})),SamsungSCloudSyncService.SyncLogs.log(`Server Records Size = ${AbstractSyncAdapterGlobal.mServerChangedRecords.size()}`)}},this.addToDownloadKeyList=async function(response){const updates=response.getKeyDetailList();if(null==updates||0==updates.length)return!1;for(let i=0;i<updates.length;i++){const record=updates[i],item=new KVSItem(-1,record.isDeleted(),record.getTimeStamp(),null,record.getSize());SamsungSCloudSyncService.firstSyncCompleted?record.getKEY().match(SamsungSCloudSyncService.OLD_SYNC_KEY)?record.getKEY().match(SamsungSCloudSyncService.CURRENT_DATE_TIME)&&AbstractSyncAdapterGlobal.ServerChanges.set(record.getKEY(),item):AbstractSyncAdapterGlobal.ServerChanges.set(record.getKEY(),item):record.isDeleted()||AbstractSyncAdapterGlobal.ServerChanges.set(record.getKEY(),item)}AbstractSyncAdapterGlobal.ServerChanges.length>0&&(await storageLocalApi.setItem(MAX_PROGRESS,AbstractSyncAdapterGlobal.ServerChanges.length),chrome.runtime.sendMessage({KEY_DOWNLOAD_STATUS:AbstractSyncAdapterGlobal.ServerChanges.length}));return!0},this.handleException=function(syncResult,exception){},this.cancelSync=function(){SamsungSCloudSyncService.SyncLogs.log("cancelSync: SYNC CANCELLED!!!"),AbstractSyncAdapterGlobal.mbSyncCanceled=!0;this.getCloudServiceManager().getRecordServiceManager().close()},this.performSync=function(trigger){AbstractSyncAdapterGlobal.mbSyncCanceled=!1,SamsungSCloudSyncService.mAppTool||(SamsungSCloudSyncService.mAppTool=new AppTool);if(this.getCloudServiceManager().setCtid(this.getCtidKey()+SamsungSCloudSyncService.mAppTool.generateCTID(8)),this.mServiceManager.setAuthManager(SamsungSCloudSyncService.sAuthManager),AbstractSyncAdapterGlobal.mbSyncCanceled)return void SamsungSCloudSyncService.SyncLogs.log("performSync: SYNC_CANCELLED");SamsungSCloudSyncService.SyncLogs.log("performSync: PERFORM SYNC : START "+Date.now());const syncTime=storageLocalApi.getItem(AbstractSyncAdapterGlobal.getSyncAdapterName());AbstractSyncAdapterGlobal.mLastSyncTime=0==syncTime?null:syncTime,SamsungSCloudSyncService.SyncLogs.log(`performSync: LastSyncTime: ${AbstractSyncAdapterGlobal.mLastSyncTime}`),null!=this.mServiceManager.getAuthManager()?(AbstractSyncAdapterGlobal.handleSync(),AbstractSyncAdapterGlobal.result="0"):SamsungSCloudSyncService.SyncLogs.log("performSync: No Auth Info.. Can not call cloud-start")},this.serviceEndCallbackFromNetworkClient=function(){null!=AbstractSyncAdapterGlobal.mServerChangedRecords&&(AbstractSyncAdapterGlobal.mServerChangedRecords=new Hash);AbstractSyncAdapterGlobal.mBuilder=null,AbstractSyncAdapterGlobal.mbSyncCanceled=!1,SamsungSCloudSyncService.BrowserOverlay.clearSyncTimeoutInterval(),"ALL_SYNC"==SamsungSCloudSyncService.currentSync?(SamsungSCloudSyncService.syncBookmarksInDB=!0,SamsungSCloudSyncService.SyncLogs.log("Bookmark Sync Completed"),SamsungSCloudSyncService.mSyncCancelled||(SamsungSCloudSyncService.SyncLogs.log("Bookmark Sync Completed"),chrome.runtime.sendMessage({SYNC:SamsungSCloudSyncService.firstSyncCompleted?"BOOKMARK_SYNC_COMPLETED":"FIRST_BOOKMARK_SYNC_COMPLETED"})),SamsungSCloudSyncService.firstSyncCompleted=!0,isOpenTabsSyncOn()?(SamsungSCloudSyncService.currentSync="TAB_SYNC",SamsungSCloudSyncService.BrowserOverlay.startSync()):performSyncCompleted()):"TAB_SYNC"==SamsungSCloudSyncService.currentSync&&(SamsungSCloudSyncService.syncTabsInDB=!0,SamsungSCloudSyncService.SyncLogs.log("Tabs Sync Completed"),SamsungSCloudSyncService.mSyncCancelled||(SamsungSCloudSyncService.SyncLogs.log("Tabs Sync Completed"),chrome.runtime.sendMessage({SYNC:SamsungSCloudSyncService.firstSyncCompleted?"TAB_SYNC_COMPLETED":"FIRST_TAB_SYNC_COMPLETED"})),SamsungSCloudSyncService.firstSyncCompleted=!0,performSyncCompleted())},this.deleteItemsCallback=function(kvsResponse){AbstractSyncAdapterGlobal.handleResponse(kvsResponse,AbstractSyncAdapterGlobal.operations,AbstractSyncAdapterGlobal.DELETE_FROM_SERVER,AbstractSyncAdapterGlobal.deleteEnd-AbstractSyncAdapterGlobal.deleteStart),AbstractSyncAdapterGlobal.deleteStart=AbstractSyncAdapterGlobal.deleteEnd,AbstractSyncAdapterGlobal.recordsToDeleteList.length>AbstractSyncAdapterGlobal.deleteStart?AbstractSyncAdapterGlobal.deleteFromServer():(AbstractSyncAdapterGlobal.recordsToDeleteList=0,AbstractSyncAdapterGlobal.uploadStart=0,AbstractSyncAdapterGlobal.uploadEnd=0,AbstractSyncAdapterGlobal.uploadToServer())},this.deleteFromServer=function(){if(AbstractSyncAdapterGlobal.recordsToDeleteList.length>0){AbstractSyncAdapterGlobal.deleteEnd=AbstractSyncAdapterGlobal.deleteStart+AbstractSyncAdapterGlobal.SIZE,AbstractSyncAdapterGlobal.recordsToDeleteList.length<AbstractSyncAdapterGlobal.deleteEnd&&(AbstractSyncAdapterGlobal.deleteEnd=AbstractSyncAdapterGlobal.recordsToDeleteList.length);const recordServiceManager=AbstractSyncAdapterGlobal.getCloudServiceManager();AbstractSyncAdapterGlobal.deleteItemsCallback=AbstractSyncAdapterGlobal.deleteItemsCallback.bind(AbstractSyncAdapterGlobal),recordServiceManager.getRecordServiceManager().deleteItems(AbstractSyncAdapterGlobal.recordsToDeleteList.slice(AbstractSyncAdapterGlobal.deleteStart,AbstractSyncAdapterGlobal.deleteEnd),AbstractSyncAdapterGlobal.deleteItemsCallback)}else AbstractSyncAdapterGlobal.recordsToDeleteList=0,AbstractSyncAdapterGlobal.uploadStart=0,AbstractSyncAdapterGlobal.uploadEnd=0,AbstractSyncAdapterGlobal.uploadToServer()},this.setItemsCallback=function(kvsResponse){AbstractSyncAdapterGlobal.handleResponse(kvsResponse,AbstractSyncAdapterGlobal.operations,AbstractSyncAdapterGlobal.UPDATE_TO_SERVER,AbstractSyncAdapterGlobal.uploadEnd-AbstractSyncAdapterGlobal.uploadStart),AbstractSyncAdapterGlobal.uploadStart=AbstractSyncAdapterGlobal.uploadEnd,AbstractSyncAdapterGlobal.recordstoSetList.length>AbstractSyncAdapterGlobal.uploadStart?AbstractSyncAdapterGlobal.uploadToServer():(AbstractSyncAdapterGlobal.recordstoSetList=[],AbstractSyncAdapterGlobal.updateLocal(AbstractSyncAdapterGlobal.operations))},this.uploadToServer=function(){if(AbstractSyncAdapterGlobal.recordstoSetList.length>0){AbstractSyncAdapterGlobal.uploadEnd=AbstractSyncAdapterGlobal.uploadStart+AbstractSyncAdapterGlobal.SIZE,AbstractSyncAdapterGlobal.recordstoSetList.length<AbstractSyncAdapterGlobal.uploadEnd&&(AbstractSyncAdapterGlobal.uploadEnd=AbstractSyncAdapterGlobal.recordstoSetList.length);const recordServiceManager=AbstractSyncAdapterGlobal.getCloudServiceManager();AbstractSyncAdapterGlobal.setItemsCallback=AbstractSyncAdapterGlobal.setItemsCallback.bind(AbstractSyncAdapterGlobal),SamsungSCloudSyncService.kvsResponse=recordServiceManager.getRecordServiceManager().setItems(AbstractSyncAdapterGlobal.recordstoSetList.slice(AbstractSyncAdapterGlobal.uploadStart,AbstractSyncAdapterGlobal.uploadEnd),AbstractSyncAdapterGlobal.setItemsCallback)}else AbstractSyncAdapterGlobal.recordstoSetList=[],AbstractSyncAdapterGlobal.updateLocal(AbstractSyncAdapterGlobal.operations)},this.updateLocal=function(operations){0==operations.length&&AbstractSyncAdapterGlobal.updateLocalCallback();null==AbstractSyncAdapterGlobal.mBuilder&&(AbstractSyncAdapterGlobal.mBuilder=AbstractSyncAdapterGlobal.getBuilder());let start=0;const maxBatchSize=AbstractSyncAdapterGlobal.mBuilder.getBatchSize(),size=operations.length;let end=0,subOperations=[];for(;size>start;){end=start+maxBatchSize,size<end&&(end=size),subOperations=[];const finalOperations=subOperations.concat(operations.slice(start,end));AbstractSyncAdapterGlobal.getProvider().applyBatch(finalOperations,AbstractSyncAdapterGlobal.updateLocalCallback),start=end}},this.updateLocalCallback=function(){SamsungSCloudSyncService.SyncLogs.log("updateLocalCallback is called "),operations=[],null!=AbstractSyncAdapterGlobal.mServerChangedRecords&&0!=AbstractSyncAdapterGlobal.mServerChangedRecords.size()?(SamsungSCloudSyncService.SyncLogs.log("updateLocalCallback: updateLocalDb"),AbstractSyncAdapterGlobal.updateLocalDb()):AbstractSyncAdapterGlobal.cloudServiceEnd()},this.updatetoServer=function(setList,deleteList){AbstractSyncAdapterGlobal.operations=[],AbstractSyncAdapterGlobal.deleteStart=0,AbstractSyncAdapterGlobal.deleteEnd=0,AbstractSyncAdapterGlobal.deleteFromServer()},this.getBaseKeyHeader=function(){return AbstractSyncAdapterGlobal.SYNC_BASE_KEY},this.getSyncUnitKeyHeader=function(){return`${AbstractSyncAdapterGlobal.getBaseKeyHeader()}_${AbstractSyncAdapterGlobal.getSyncAdapterName()}`},this.getSyncUnitDeviceKeyHeader=function(){const BC=new BrowserConstants;AbstractSyncAdapterGlobal.getContentUri()===BC.BROWSER_BOOKMARK_URI&&(SamsungSCloudSyncService.mClientDeviceId=BC.EXT_DEVICE_ID);return`${AbstractSyncAdapterGlobal.getSyncUnitKeyHeader()}_${SamsungSCloudSyncService.mClientDeviceId}`},this.generateKey=function(){const GUID=SamsungSCloudSyncService.BrowserOverlay.randomUUID();return`${AbstractSyncAdapterGlobal.getSyncUnitDeviceKeyHeader()}_${GUID}_${SamsungSCloudSyncService.CURRENT_DATE_TIME}`},this.handleUpdateToServerRecord=function(values,item){values.DIRTY=0,values.SYNC5=item.getTimeStamp()},this.handleResponse=function(kvsResponse,operations,opType,updated){if(null!=kvsResponse&&0==kvsResponse.getResponseCode()){const response=kvsResponse.getItemResponseList();if(null==response||0==response.length)return;const values={};for(let i=0;i<response.length;i++){const item=response[i];if(0==item.getRcode()){const rowId=AbstractSyncAdapterGlobal.mLocalChangedRecords.get(item.getKEY());if(null==rowId)continue;opType==AbstractSyncAdapterGlobal.UPDATE_TO_SERVER?(AbstractSyncAdapterGlobal.handleUpdateToServerRecord(values,item),operations.push(new BatchOperation("UPDATE",AbstractSyncAdapterGlobal.getContentUri(),values,{equals:[{key:"_ID",value:rowId}]},null,null))):operations.push(new BatchOperation("DELETE",AbstractSyncAdapterGlobal.getContentUri(),null,{equals:[{key:"_ID",value:rowId}]},null,null)),AbstractSyncAdapterGlobal.mLocalChangedRecords.unset(item.getKEY())}else item.getRcode()!=SamsungSCloudSyncService.mServerCommonConstants.KVS_SERVER_STORAGE_FULL&&item.getRcode()!=SamsungSCloudSyncService.mServerCommonConstants.ORS_SERVER_STORAGE_FULL||AbstractSyncAdapterGlobal.notifyServerStoragefull()}}else kvsResponse.getResponseCode()!=SamsungSCloudSyncService.mServerCommonConstants.KVS_SERVER_STORAGE_FULL&&kvsResponse.getResponseCode()!=SamsungSCloudSyncService.mServerCommonConstants.ORS_SERVER_STORAGE_FULL||AbstractSyncAdapterGlobal.notifyServerStoragefull()},this.getLocalUpdatesQueryCallback=function(cursor){if(SamsungSCloudSyncService.SyncLogs.log("getLocalUpdatesQueryCallback"),null==cursor||void 0===cursor.length||0==cursor.length)return SamsungSCloudSyncService.SyncLogs.log("Sorry, There is no data in Database, Can't perform Upsync"),void(null!=AbstractSyncAdapterGlobal.mServerChangedRecords&&0!=AbstractSyncAdapterGlobal.mServerChangedRecords.size()?(SamsungSCloudSyncService.SyncLogs.log("getLocalUpdatesQueryCallback: updateLocalDb"),AbstractSyncAdapterGlobal.updateLocalDb()):AbstractSyncAdapterGlobal.cloudServiceEnd());let mDeleted=-1,mSyncKey=null,mRowId=-1,mTimeStamp=0,values=null;const uri=AbstractSyncAdapterGlobal.getContentUri();AbstractSyncAdapterGlobal.updateKeyOperation=[],AbstractSyncAdapterGlobal.recordstoSetList=[],AbstractSyncAdapterGlobal.recordsToDeleteList=[];let uploadsize=0;AbstractSyncAdapterGlobal.mLocalChangedRecords=new Hash;const mTotalSize=cursor.length;null==AbstractSyncAdapterGlobal.mBuilder&&(AbstractSyncAdapterGlobal.mBuilder=AbstractSyncAdapterGlobal.getBuilder());if(mTotalSize<1)return;for(let i=0;i<mTotalSize;i++){if(mDeleted="1"==cursor[i].IS_DELETED,mSyncKey=cursor[i].SYNC1,mRowId=cursor[i]._ID,mTimeStamp=cursor[i].SYNC5,0==mTimeStamp&&(SamsungSCloudSyncService.SyncLogs.log("getLocalUpdatesQueryCallback:TimeStamp is NULL....cannot be NULL"),mTimeStamp=AbstractSyncAdapterGlobal.mTimeManager.getCurrentTime()),0==mDeleted){if(null==AbstractSyncAdapterGlobal.mServerChangedRecords||void 0===AbstractSyncAdapterGlobal.mServerChangedRecords.index(mSyncKey)||-1==AbstractSyncAdapterGlobal.mServerChangedRecords.index(mSyncKey)){null!=mSyncKey&&mSyncKey.indexOf(AbstractSyncAdapterGlobal.getBaseKeyHeader())>-1||(mSyncKey=AbstractSyncAdapterGlobal.generateKey(),values={SYNC1:mSyncKey},AbstractSyncAdapterGlobal.addToOperations(AbstractSyncAdapterGlobal.updateKeyOperation,uri,values,mRowId));const value=AbstractSyncAdapterGlobal.mBuilder.parse(cursor[i],mRowId,mSyncKey);null!=value&&(uploadsize+=value.length,AbstractSyncAdapterGlobal.recordstoSetList.push(new RecordSetItem(mSyncKey,mTimeStamp,value)),AbstractSyncAdapterGlobal.mLocalChangedRecords.set(mSyncKey,mRowId),SamsungSCloudSyncService.SyncLogs.log(`getLocalUpdatesQueryCallback: Added to Upsync set ${mRowId}`))}}else 1==mDeleted&&null!=mSyncKey&&mSyncKey.indexOf(AbstractSyncAdapterGlobal.getBaseKeyHeader()>-1)?(null==AbstractSyncAdapterGlobal.mServerChangedRecords||void 0===AbstractSyncAdapterGlobal.mServerChangedRecords.index(mSyncKey)||AbstractSyncAdapterGlobal.mServerChangedRecords.index(mSyncKey)>-1)&&(AbstractSyncAdapterGlobal.recordsToDeleteList.push(new RecordBase(mSyncKey,mTimeStamp)),AbstractSyncAdapterGlobal.mLocalChangedRecords.set(mSyncKey,mRowId),SamsungSCloudSyncService.SyncLogs.log(`getLocalUpdatesQueryCallback: Added to Upsync Delete = ${mRowId}`)):1==mDeleted&&(AbstractSyncAdapterGlobal.getProvider().Delete(uri,{equals:[{key:AbstractSyncAdapterGlobal.getIdColumnName(),value:mRowId}]},null),SamsungSCloudSyncService.SyncLogs.log(`getLocalUpdatesQueryCallback: Local Delete set ${mRowId}`));0}AbstractSyncAdapterGlobal.doApplyBatch(AbstractSyncAdapterGlobal.updateKeyOperation),0==AbstractSyncAdapterGlobal.updateKeyOperation.length&&AbstractSyncAdapterGlobal.updatetoServer(AbstractSyncAdapterGlobal.recordstoSetList,AbstractSyncAdapterGlobal.recordsToDeleteList)},this.getLocalUpdates=function(){AbstractSyncAdapterGlobal.getProvider().Query(AbstractSyncAdapterGlobal.getContentUri(),null,{equals:[{key:AbstractSyncAdapterGlobal.getDirtyColumnName(),value:1},{key:AbstractSyncAdapterGlobal.getAccountName(),value:SamsungSCloudSyncService.mSyncConstants.ACCOUNT_NAME},{key:AbstractSyncAdapterGlobal.getAccountType(),value:SamsungSCloudSyncService.mSyncConstants.ACCOUNT_TYPE}]},null,null,AbstractSyncAdapterGlobal.getLocalUpdatesQueryCallback)},this.addToOperations=function(updateKeyOperation,uri,values,rowId){updateKeyOperation.push(new BatchOperation("UPDATE",uri,values,{equals:[{key:AbstractSyncAdapterGlobal.getIdColumnName(),value:rowId}]},null,null))},this.getProjection=function(){return[AbstractSyncAdapterGlobal.getIdColumnName(),AbstractSyncAdapterGlobal.getKeyColumnName(),AbstractSyncAdapterGlobal.getTimeStampColumnName(),AbstractSyncAdapterGlobal.getDeletedColumnName()]},this.getServerUpdatesCallback=function(){try{AbstractSyncAdapterGlobal.getLocalUpdates()}catch(e){SamsungSCloudSyncService.SyncLogs.log(`getServerUpdatesCallback: Error occured on getLocalUpdates()${e}`),chrome.runtime.sendMessage({ERROR:"Can't get local updates"})}},this.getServerTime=function(){const recordServiceManager=AbstractSyncAdapterGlobal.getCloudServiceManager();AbstractSyncAdapterGlobal.getServerTimeStampCallback=AbstractSyncAdapterGlobal.getServerTimeStampCallback.bind(this),recordServiceManager.getRecordServiceManager().getServerTimeStamp(AbstractSyncAdapterGlobal.getServerTimeStampCallback)},this.getServerTimeStampCallback=function(mKVSResponse){let serverTimeStamp=0;if(null!=mKVSResponse){const responseCode=mKVSResponse.getResponseCode();0==responseCode?(serverTimeStamp=mKVSResponse.getServerTimeStamp(),AbstractSyncAdapterGlobal.serverTimeStamp=serverTimeStamp,SamsungSCloudSyncService.SyncLogs.log(`The server time stamp received is ${serverTimeStamp}`)):SamsungSCloudSyncService.SyncLogs.log(`There was an error in the request.Error Response code obtained${responseCode}`)}void 0!==serverTimeStamp&&0!=serverTimeStamp&&(AbstractSyncAdapterGlobal.mTimeManager.updateSettingsUsingServer(serverTimeStamp),AbstractSyncAdapterGlobal.getServerUpdatesCallback=AbstractSyncAdapterGlobal.getServerUpdatesCallback.bind(this),AbstractSyncAdapterGlobal.getServerUpdates(),SamsungSCloudSyncService.Once=1)},this.handleSync=function(){AbstractSyncAdapterGlobal.getServerTime()},this.removePreSyncedRecordsQueryCallback=function(preCursor){if(null==preCursor)return SamsungSCloudSyncService.SyncLogs.log("removePreSyncedRecordsQueryCallback: (ERROR)Cursor is null"),1==SamsungSCloudSyncService.Once&&(SamsungSCloudSyncService.Once=0,AbstractSyncAdapterGlobal.getServerUpdatesCallback()),!1;const localKeys=[];let i=0;if(void 0===preCursor.length||0==preCursor.length)SamsungSCloudSyncService.SyncLogs.log("removePreSyncedRecordsQueryCallback:  there is nothing to be removed.");else do{const modifiedTimeUploadedtoServer=preCursor[i].SYNC5,key=preCursor[i].SYNC1,deletedField="1"==preCursor[i].IS_DELETED,id=preCursor[i]._ID;localKeys.push(key);const serverItem=AbstractSyncAdapterGlobal.uServerRecords.get(key);if(null!=serverItem)if(modifiedTimeUploadedtoServer>serverItem.getTimeStamp()){if(1!=deletedField&&serverItem.isDeleted()){const dirtyValues=[AbstractSyncAdapterGlobal.getDirtyColumnName(),1];try{AbstractSyncAdapterGlobal.getProvider().Update(uriFromSyncAdapter,dirtyValues,{equals:[{key:AbstractSyncAdapterGlobal.getKeyColumnName(),value:key}]},null),SamsungSCloudSyncService.SyncLogs.log(`removePreSyncedRecordsQueryCallback: UPDATE DIRTY, Key : ${key}`)}catch(e){SamsungSCloudSyncService.SyncLogs.log("removePreSyncedRecordsQueryCallback: COULDN'T UPDATE DIRTY = 1")}}AbstractSyncAdapterGlobal.uServerRecords.unset(key),SamsungSCloudSyncService.SyncLogs.log(`removePreSyncedRecordsQueryCallback: Unset Key : ${key}`)}else AbstractSyncAdapterGlobal.uServerRecords.get(key).setID(id),SamsungSCloudSyncService.SyncLogs.log(`removePreSyncedRecordsQueryCallback: Set ID for Key : ${key}`);else SamsungSCloudSyncService.SyncLogs.log("Sync Broken : There is a duplicated record on Local.");i++}while(preCursor.length>i);1==SamsungSCloudSyncService.Once&&(SamsungSCloudSyncService.Once=0,AbstractSyncAdapterGlobal.getServerUpdatesCallback());let cnt=0;AbstractSyncAdapterGlobal.uServerRecords.eachIterator((serverKey=>{AbstractSyncAdapterGlobal.uServerRecords.get(serverKey[0]).isDeleted()&&!localKeys.indexOf(serverKey)&&(AbstractSyncAdapterGlobal.uServerRecords.unset(serverKey),cnt++)})),cnt>0&&SamsungSCloudSyncService.SyncLogs.log(`remove from serverChanges that already deleted in local : ${cnt}`)},this.removePreSyncedRecords=function(uServerRecords){if(void 0===uServerRecords||0==uServerRecords.size())return AbstractSyncAdapterGlobal.removePreSyncedRecordsQueryCallback(null),!1;const keyset=uServerRecords.keys();SamsungSCloudSyncService.mAppTool||(SamsungSCloudSyncService.mAppTool=new AppTool);let where=`${AbstractSyncAdapterGlobal.getKeyColumnName()} IN (`;where=SamsungSCloudSyncService.mAppTool.appendIds(where,keyset),where=where.concat(")"),where={ins:[{key:AbstractSyncAdapterGlobal.getKeyColumnName(),value:keyset}]},AbstractSyncAdapterGlobal.uServerRecords=uServerRecords;const uriFromSyncAdapter=AbstractSyncAdapterGlobal.getContentUri();try{AbstractSyncAdapterGlobal.removePreSyncedRecordsQueryCallback=AbstractSyncAdapterGlobal.removePreSyncedRecordsQueryCallback.bind(AbstractSyncAdapterGlobal),AbstractSyncAdapterGlobal.getProvider().Query(uriFromSyncAdapter,AbstractSyncAdapterGlobal.getProjection(),where,null,null,AbstractSyncAdapterGlobal.removePreSyncedRecordsQueryCallback)}catch(e){return SamsungSCloudSyncService.SyncLogs.log(`Exception in calling query ${e}`),chrome.runtime.sendMessage({ERROR:"Query local DB exception"}),!1}return!0},this.cloudServiceEnd=function(){SamsungSCloudSyncService.SyncLogs.log("AbstractSyncAdapter.js :: cloudServiceEnd"),0==AbstractSyncAdapterGlobal.getSyncAdapterName().search(BOOKMARK_SERVER_TIME)?SamsungSCloudSyncService.isFixParentIDsDone?(AbstractSyncAdapterGlobal.serviceEndFromSync(),SamsungSCloudSyncService.SyncLogs.log("Bookmarks Sync done, Wait for Callback to end the service.")):(AbstractSyncAdapterGlobal.fixParentIds(),SamsungSCloudSyncService.isFixParentIDsDone=!0):AbstractSyncAdapterGlobal.serviceEndFromSync()},this.serviceEndFromSync=async function(){SamsungSCloudSyncService.SyncLogs.log("Service end from sync"),null!=AbstractSyncAdapterGlobal.mLastSyncTime&&null!=AbstractSyncAdapterGlobal.serverTimeStamp&&(await storageLocalApi.setItem(AbstractSyncAdapterGlobal.getSyncAdapterName(),AbstractSyncAdapterGlobal.serverTimeStamp),SamsungSCloudSyncService.SyncLogs.log(`Save Last Sync Time (serverTimeStamp): ${AbstractSyncAdapterGlobal.serverTimeStamp}`),SamsungSCloudSyncService.SyncLogs.log(`mLastSyncTime: ${AbstractSyncAdapterGlobal.mLastSyncTime}`));null!=AbstractSyncAdapterGlobal.mServiceManager.getAuthManager()?(SamsungSCloudSyncService.SyncLogs.log("Sync Done. Ending the Cloud Service"),AbstractSyncAdapterGlobal.serviceEndCallbackFromNetworkClient=AbstractSyncAdapterGlobal.serviceEndCallbackFromNetworkClient.bind(AbstractSyncAdapterGlobal),AbstractSyncAdapterGlobal.mServiceManager.serviceEnd(!0,AbstractSyncAdapterGlobal.result,AbstractSyncAdapterGlobal.serviceEndCallbackFromNetworkClient)):SamsungSCloudSyncService.SyncLogs.log("No Auth Info.. Can not call cloud-end")},this.notifyServerStoragefull=function(){SamsungSCloudSyncService.SyncLogs.log("System is under STORAGE FULL ")},this.getCloudServiceManager=function(){return AbstractSyncAdapterGlobal.mServiceManager};const partialLoadCallback=function(){let countOfInsertedItems=1,countOfInsertedItemsToRoot=1,lastRenderAt=0,updateOffset=10;return function(insertStatus,addedItem){!SamsungSCloudSyncService.firstSyncCompleted&&lastRenderAt!==countOfInsertedItemsToRoot&&countOfInsertedItemsToRoot%updateOffset==0&&(lastRenderAt=countOfInsertedItemsToRoot,updateOffset*=2,chrome.runtime.sendMessage({SYNC:"FIRST_SYNC_PARTIAL_LOAD"})),countOfInsertedItems%10==0&&chrome.runtime.sendMessage({ITEM_DOWNLOAD_STATUS:countOfInsertedItems});const sync3=JSON.parse(addedItem.mValue).sync3;countOfInsertedItemsToRoot+=insertStatus>=1&&(""===sync3||"undefined"==sync3||null==sync3),countOfInsertedItems++}}();function getAllkeys(serverChanges,startKey,isColdStart=!1){const recordServiceManager=this.getCloudServiceManager();this.getKeysCallbackFromNetworkClient=this.getKeysCallbackFromNetworkClient.bind(this),recordServiceManager.getRecordServiceManager().getKeys(startKey,this.GET_KEYS_SIZE,this.getKeysCallbackFromNetworkClient,isColdStart)}async function performSyncCompleted(){SamsungSCloudSyncService.currentSync="",await storageLocalApi.setItem(SYNC_STATUS,"SYNC_COMPLETED"),SamsungSCloudSyncService.BrowserOverlay.clearAutoSyncTimeoutInterval(!1),SamsungSCloudSyncService.BrowserOverlay.clearSyncTimeoutInterval(),SamsungSCloudSyncService.SyncLogs.log("performSync: PERFORM SYNC : END "+Date.now())}}function Hash(obj){this.length=0,this.items={};for(const p in obj)obj.hasOwnProperty(p)&&(this.items[p]=obj[p],this.length++);this.set=function(key,value){let previous;this.hasItem(key)?previous=this.items[key]:this.length++;return this.items[key]=value,previous},this.get=function(key){return this.hasItem(key)?this.items[key]:void 0},this.hasItem=function(key){return this.items.hasOwnProperty(key)},this.unset=function(key){if(this.hasItem(key))return previous=this.items[key],this.length--,delete this.items[key],previous;return},this.keys=function(){const keys=[];for(const k in this.items)this.hasItem(k)&&keys.push(k);return keys},this.values=function(){const values=[];for(const k in this.items)this.hasItem(k)&&values.push(this.items[k]);return values},this.each=function(fn){for(const k in this.items)this.hasItem(k)&&fn(k,this.items[k])},this.eachIterator=function(iterator,context){try{let i=0;for(const key in this._object){let value=this._object[key],pair=[key,value];pair.key=key,pair.value=value,iterator.call(context,pair,i),i++}}catch(e){if(e!=$break)throw e}return this},this.clear=function(){this.items={},this.length=0},this.size=function(){return this.length},this.index=function(value){const match=this.detect((pair=>pair.value===value));return match&&match.key},this.merge=function(object){return this.clone().update(object)},this.detect=function(iterator,context){let result;return this.eachIterator((function(value,index){if(iterator.call(context,value,index,this))throw result=value,$break}),this),result},this.clone=function(){return new Hash(this)},this.update=function(object){return new Hash(object).inject(this,((result,pair)=>(result.set(pair.key,pair.value),result)))}}SamsungSCloudSyncService.kvsResponse=null,SamsungSCloudSyncService.startKey=null,SamsungSCloudSyncService.isFixParentIDsDone=!1,SamsungSCloudSyncService.Once=-1;