const mContentProvider=new ContentProvider;var syncedBookmarkItems=0,syncedTabItems=0,removeDuplicateItems=[],moveChildrenDuplicateItems=[];const createSYNC4=({id:id,parent:parent})=>`${EXT_DEVICE_ID}_${Date.now()}_${parent}_${id}`,prefixUrlWithProtocol=url=>(["http","ftp"].some((e=>0===url.indexOf(e)))||(url=`http://${url}`),url);function cookBookmarkData({isFolder:isFolder=!1,url:url="",title:title,id:id,position:position,parent:parent,dominantColor:dominantColor,force:force}){const SERVER_TIMESTAMP=parseInt(storageLocalApi.getItem(BOOKMARK_SERVER_TIME))||AbstractSyncAdapterGlobal.mTimeManager.getCurrentTime();return new Promise(((yes,no)=>{title=sanitizeTitle(title);let DEVICE_ID=EXT_DEVICE_ID,DEVICE_NAME=EXT_DEVICE_NAME,MODIFIED=SERVER_TIMESTAMP,CREATED=MODIFIED,data={_ID:id,TITLE:title,FOLDER:isFolder?1:0,DIRTY:1,IS_DELETED:"0",INSERT_AFTER:"0",BOOKMARK_ID:id,POSITION:position,ACCOUNT_NAME:storageLocalApi.getItem("ACCOUNT_NAME"),ACCOUNT_TYPE:storageLocalApi.getItem("ACCOUNT_TYPE"),DEVICE_NAME:DEVICE_NAME,DEVICE_ID:DEVICE_ID,CREATED:CREATED,MODIFIED:MODIFIED,SYNC5:0,PARENT:parent,SYNC4:createSYNC4({id:id,parent:parent}),DOMINANT_COLOR:parseInt(defaultIfUndefined(dominantColor,0)),TAGS:null,SOURCEID:null};return 0===title.length?no(TITLE_EMPTY):!isFolder&&isBrowserURL(url)?no(URL_INVALID):(url=prefixUrlWithProtocol(url),void DB.Query.bookmarks({selection:["_ID"],where:{equals:[{key:"TITLE",value:title},{key:"URL",value:url},{key:"PARENT",value:parent},{key:"IS_DELETED",value:"0"}]}}).then((r=>{if(!force&&r&&r.length>0)return no(BOOKMARK_EXISTS);data.url=isFolder?"":url,0!=parent?(data.SOURCEID=parent,DB.Query.bookmarks({selection:["SYNC4"],where:{equals:[{key:"_ID",value:parent},{key:"FOLDER",value:1}]}}).then((([{SYNC4:SYNC4}])=>{data.SYNC3=SYNC4,yes(data)}))):(data.SOURCEID=null,data.SYNC3=null,yes(data))})))}))}function cookUpdateData({isFolder:isFolder,title:title,url:url,SYNC3:SYNC3,parent:parent,dominantColor:dominantColor=0,POSITION:POSITION}){const data={TITLE:title,DIRTY:1,SYNC5:0,MODIFIED:parseInt(storageLocalApi.getItem(BOOKMARK_SERVER_TIME))||AbstractSyncAdapterGlobal.mTimeManager.getCurrentTime(),DOMINANT_COLOR:parseInt(defaultIfUndefined(dominantColor,0))};return 0===title.length?Promise.reject(TITLE_EMPTY):!isFolder&&isBrowserURL(url)?Promise.reject(URL_INVALID):(data.URL=isFolder?"":prefixUrlWithProtocol(url),POSITION&&(data.POSITION=POSITION),SYNC3&&(data.SYNC3=SYNC3,data.PARENT=parent),0==parent&&(data.SYNC3=null,data.PARENT=parent),SamsungSCloudSyncService.SyncLogs.log(JSON.stringify(data,null,2)),data)}function isValidBookmark({title:title,url:url,parent:parent}){if(!title)throw new Error("Title is mandatory");if(!isValidURL(url))throw new Error("Url is invalid");return!0}async function addBookmark({url:url,title:title,parent:parent=0,isFolder:isFolder=!1,force:force=!1}){const{maxPosition:maxPosition,maxId:maxId}=await getMaxBookmarkPosId(),id=maxId+1,position=Number(maxPosition)+1,data=await cookBookmarkData({isFolder:isFolder,url:url,title:title,parent:parseInt(parent),id:id,position:position,force:force});return DB.Insert.bookmarks({data:data})}async function getMaxBookmarkPosId(){return{maxPosition:await DB.Max.bookmarks({key:"POSITION"}),maxId:await DB.Max.bookmarks({key:"_ID"})}}async function createFolder({title:title,parent:parent=0,force:force=!1}){const where={equals:[{key:"TITLE",value:title=sanitizeTitle(title)},{key:"PARENT",value:parseInt(parent)},{key:"IS_DELETED",value:"0"},{key:"FOLDER",value:1}]};if(!force){if(0!==(await DB.Query.bookmarks({selection:["_ID"],where:where})).length)throw new Error(FOLDER_NAME_EXISTS)}const{maxPosition:maxPosition,maxId:maxId}=await getMaxBookmarkPosId(),id=maxId+1,position=Number(maxPosition)+1,data=await cookBookmarkData({isFolder:!0,title:title,parent:parseInt(parent),id:id,position:position});await DB.Insert.bookmarks({data:data});const dbResult=await DB.Query.bookmarks({selection:null,where:where});return console.log("Folder created: ",JSON.stringify(dbResult)),dbResult[0]._ID}async function isBookmarkAdded({url:url}){return DB.Query.bookmarks({selection:["URL as url"],where:{equals:[{key:"URL",value:url},{key:"IS_DELETED",value:"0"},{key:"FOLDER",value:0}]}}).then(Array.from).then((result=>result.length>0))}async function checkSimilarBookmark({title:title,url:url,parent:parent,isFolder:isFolder}){title=sanitizeTitle(title),isFolder||(url=prefixUrlWithProtocol(url));const query={folder:{equals:[{key:"TITLE",value:title},{key:"PARENT",value:parent},{key:"IS_DELETED",value:"0"},{key:"FOLDER",value:1}]},bookmark:{equals:[{key:"TITLE",value:title},{key:"URL",value:url},{key:"PARENT",value:parent},{key:"IS_DELETED",value:"0"},{key:"FOLDER",value:0}]}};return 0!==(await DB.Query.bookmarks({selection:["_ID"],where:query[isFolder?"folder":"bookmark"]})).length}async function updateBookmark({id:id,url:url="",title:title,isFolder:isFolder=!1,parent:parent=0,dominantColor:dominantColor=0}){const[{currentParent:currentParent}]=await DB.Query.bookmarks({selection:["PARENT as currentParent"],where:{equals:[{key:"_ID",value:id}]}});parent=parseInt(parent),title=sanitizeTitle(title),SamsungSCloudSyncService.SyncLogs.log(`Editing bookmark ${title} - ${url}`);if(await checkSimilarBookmark({title:title,url:url,parent:parent,isFolder:isFolder}))return Promise.reject(isFolder?FOLDER_NAME_EXISTS:BOOKMARK_EXISTS);const _doUpdate=data=>DB.Update.bookmarks({newData:data,where:{equals:[{key:"_ID",value:id}]}}).then((res=>{console.log("(updateBookmark) data: ",JSON.stringify(data)),console.log("(updateBookmark) response rowsAffected: ",res.rowsAffected)}));return await async function(){if(currentParent!==parent){const[resP,parentRes]=await Promise.all([DB.QueryMax.bookmarks({key:"POSITION",where:{equals:[{key:"PARENT",value:parent}]}}),DB.Query.bookmarks({selection:["SYNC4"],where:{equals:[{key:"_ID",value:parent}]}})]),updatedBookmark=cookUpdateData({isFolder:isFolder,title:title,url:url,parent:parent,POSITION:parseInt(resP)+1,SYNC3:parentRes.length>0?parentRes[0].SYNC4:null});return await _doUpdate(updatedBookmark)}return await _doUpdate(cookUpdateData({isFolder:isFolder,title:title,url:url}))}()}async function getDBBookmarkTree(){const result=await DB.Query.bookmarks({selection:["_ID as id","PARENT as parent","TITLE as title","URL as url","CREATED as created"],where:{equals:[{key:"IS_DELETED",value:"0"},{key:"FOLDER",value:1}]},sortOrder:"POSITION ASC"}),bookmarks=Array.from(result)||[];bookmarks.push({title:SAMSUNG_BOOKMARKS,id:0,children:[]});const tree=arrayToObject(bookmarks);var treeAll={title:BOOKMARKS,id:IMPORTED_MAIN_FOLDER_IDS.BOOKMARKS,children:[]},importedFolders=[];if(tree.children.length){var chromeIndex=tree.children.findIndex((item=>item.id==IMPORTED_FOLDER_IDS.CHROME));null!=chromeIndex&&chromeIndex>=0&&(importedFolders.push(tree.children[chromeIndex]),tree.children.splice(chromeIndex,1));var edgeIndex=tree.children.findIndex((item=>item.id==IMPORTED_FOLDER_IDS.EDGE));null!=edgeIndex&&edgeIndex>=0&&(importedFolders.push(tree.children[edgeIndex]),tree.children.splice(edgeIndex,1));var operaIndex=tree.children.findIndex((item=>item.id==IMPORTED_FOLDER_IDS.OPERA));null!=operaIndex&&operaIndex>=0&&(importedFolders.push(tree.children[operaIndex]),tree.children.splice(operaIndex,1)),importedFolders.sort(((a,b)=>a.created-b.created)),importedFolders.forEach((folder=>{treeAll.children.push(folder)})),treeAll.children.unshift(tree)}return treeAll}async function getSubFolders(folderId=0){const result=await DB.Query.bookmarks({selection:["_ID as id","TITLE as title","PARENT as parent"],where:{equals:[{key:"PARENT",value:folderId},{key:"FOLDER",value:1}]}});return Array.from(result)}function getFolderName(folders,folderTitle){return folders.reduce(((newFolderName,{title:title})=>{if(newFolderName===title){const suffix=parseInt(newFolderName.slice(folderTitle.length));return isNaN(suffix)?`${folderTitle} 1`:`${folderTitle} ${suffix+1}`}return newFolderName}),folderTitle)}function removeBookmark({e:e={},id:id,title:title,isFolder:isFolder=!1,parent:parent,url:url}){const attributes={title:title,"data-title":title,"data-is-folder":isFolder,"data-parent-id":parent,"data-id":id};isFolder||(attributes["data-url"]=url);const dummyTargetElement=h("a",attributes,title);onDeleteConfirm(e,dummyTargetElement)}function removeBookmark_fancytree({e:e={},id:id,title:title,isFolder:isFolder=!1,parent:parent=0,url:url}){const attributes={title:title,"data-title":title,"data-is-folder":isFolder,"data-parent-id":parent,"data-id":id};isFolder||(attributes["data-url"]=url);const dummyTargetElement=h("a",attributes,title);onDeleteBookmarkConfirm_fancytree(e,dummyTargetElement)}function removeSelectedBookmarks_fancytree(selectedNodes){const bookmarks=selectedNodes.map((node=>({_ID:node.data.id,FOLDER:node.folder})));onDeleteMultiBookmarkConfirm_fancytree(bookmarks)}function removeSelectedTabs_fancytree(selectedTabs){const tabs=selectedTabs.map((node=>({_ID:node.data.id,TITLE:node.title,PARENT:node.data.parent.data.id,URL:node.data.url})));onDeleteMultiTabConfirm_fancytree(tabs)}function removeTab_fancytree({e:e={},id:id,title:title,isFolder:isFolder=!1,parent:parent=0,url:url}){const attributes={title:title,"data-title":title,"data-is-folder":isFolder,"data-parent-id":parent,"data-id":id};isFolder||(attributes["data-url"]=url);const dummyTargetElement=h("a",attributes,title);onDeleteTabConfirm_fancytree(e,dummyTargetElement)}function deleteDesktopBookmarks(){SamsungSCloudSyncService.SyncLogs.log("Deleting Desktop Bookmarks"),DB.Query.bookmarks({selection:["_ID"],where:{likes:[{key:"DEVICE_ID",value:"Desktop"}]}}).then((bookmarks=>{if(bookmarks.length>0){const SERVER_TIMESTAMP=parseInt(storageLocalApi.getItem(BOOKMARK_SERVER_TIME)),ids=Array.from(bookmarks).map((({_ID:_ID})=>_ID)).join(",");return DB.Update.bookmarks({newData:{DIRTY:1,IS_DELETED:"1",SYNC5:SERVER_TIMESTAMP},where:{ins:[{key:"_ID",value:ids.split(",")}]}})}return Promise.resolve(0)})).then((done=>0!==done&&doBookmarkSync()))}function listToTree(list){var node,i,map={},roots=[];for(i=0;i<list.length;i+=1)map[list[i].id]=i,list[i].children=[];for(i=0;i<list.length;i+=1)"0"!==(node=list[i]).parent?void 0!==map[node.parent]&&list[map[node.parent]].children.push(node):roots.push(node);if(storageLocalApi.getItem(SYNC_STATUS)===SYNC_COMPLETED)for(i=0;i<list.length;i+=1)"0"!==(node=list[i]).parent&&null==map[node.parent]&&invalidateBookmark(node.id);return roots}async function getDBBookmarkTreeForManager(){var result=await DB.Query.bookmarks({selection:["_ID as id","PARENT as parent","TITLE as title","FOLDER as folder","URL as url","POSITION as position","CREATED as created"],where:{equals:[{key:"IS_DELETED",value:"0"}]},sortOrder:"POSITION ASC"}),bookmarks=Array.from(result)||[];syncedBookmarkItems=bookmarks.length,(bookmarks=bookmarks.map((bookmark=>Object.assign({type:"bookmark"},bookmark,{folder:Number(bookmark.folder),parent:Number(bookmark.parent),position:Number(bookmark.position)})))).push({id:"0",parent:"0",children:[]});var tree=listToTree(bookmarks),treeAll=Array();treeAll.push({title:SAMSUNG_BOOKMARKS,id:IMPORTED_FOLDER_IDS.SBROWSER,parent:"-1",position:"1",folder:"1",type:"bookmark",children:[]});const importNodes={CHROME:{title:CHROME_BOOKMARKS,id:IMPORTED_FOLDER_IDS.CHROME,parent:"-1",position:"2",folder:"1",type:"bookmark",children:[]},EDGE:{title:chrome.i18n.getMessage("DREAM_BR_HEADER_PS_BOOKMARKS").replace("%s","Edge"),id:IMPORTED_FOLDER_IDS.EDGE,parent:"-1",position:"3",folder:"1",type:"bookmark",children:[]},OPERA:{title:chrome.i18n.getMessage("DREAM_BR_HEADER_PS_BOOKMARKS").replace("%s","Opera"),id:IMPORTED_FOLDER_IDS.OPERA,parent:"-1",position:"4",folder:"1",type:"bookmark",children:[]}},importedIndex={CHROME:"",EDGE:"",OPERA:""},currentBrowser=IMPORTED_FOLDER_IDS[getBrowserName().toUpperCase()],indexExist=index=>null!=index&&index>=0;if(Object.keys(importedIndex).forEach((key=>{importedIndex[key]=tree[0].children.findIndex((item=>item.id==IMPORTED_FOLDER_IDS[key]))})),Object.keys(importedIndex).every((key=>indexExist(importedIndex[key])))){const importedItems=[tree[0].children[importedIndex.CHROME],tree[0].children[importedIndex.EDGE],tree[0].children[importedIndex.OPERA]];importedItems.sort(((a,b)=>a.created-b.created)),importedItems.forEach(((item,index)=>{treeAll.push(importNodes[IMPORTED_FOLDER_NAMES[item.id]])}))}else if(Object.keys(importedIndex).every((key=>!indexExist(importedIndex[key]))))treeAll.push(importNodes[getBrowserName().toUpperCase()]);else{[IMPORTED_FOLDER_IDS.CHROME,IMPORTED_FOLDER_IDS.EDGE,IMPORTED_FOLDER_IDS.OPERA].forEach(((key,index)=>{treeAll.push(importNodes[IMPORTED_FOLDER_NAMES[key]])}))}tree[0].children.length&&Object.keys(importedIndex).forEach((key=>{importedIndex[key]=tree[0].children.findIndex((item=>item.id==IMPORTED_FOLDER_IDS[key]));const treeItemIndex=treeAll.findIndex((item=>item.id==IMPORTED_FOLDER_IDS[key]));indexExist(importedIndex[key])&&(treeAll[treeItemIndex].children=tree[0].children[importedIndex[key]].children||[],tree[0].children.splice(importedIndex[key],1)),treeItemIndex>=0&&currentBrowser!=treeAll[treeItemIndex].id&&0==treeAll[treeItemIndex].children.length&&(DB.Delete.bookmarks({where:{equals:[{key:"_ID",value:treeAll[treeItemIndex].id}]}}),treeAll.splice(treeItemIndex,1))})),treeAll[0].children=tree[0].children,moveChildrenDuplicateItems=[],removeDuplicateItems=[];for(let i=0;i<treeAll.length;i++)mergeDuplicateBookmarks(treeAll[i]);return moveChildrenDuplicateItems=Array.from(moveChildrenDuplicateItems).map((item=>updateBookmark({id:item.id,parent:item.parent,isFolder:1===parseInt(item.folder),url:item.url,title:item.title}))),removeDuplicateItems=Array.from(removeDuplicateItems).map((item=>invalidateBookmark(item.id))),await Promise.all(moveChildrenDuplicateItems),await Promise.all(removeDuplicateItems),moveChildrenDuplicateItems=[],removeDuplicateItems=[],treeAll}function mergeDuplicateBookmarks(tree){if(tree.children&&tree.children.length>0){const result=Object.values(tree.children.reduce(((current,node)=>{let key=(node.TITLE?node.TITLE:"")+"-"+(node.URL?node.URL:"");return current[key]=current[key]||[],current[key].push(node),current}),{}));for(let i=0;i<result.length;i++)if(result[i].length>1){const isFolder=1===parseInt(result[i][0].FOLDER);result[i].sort(((a,b)=>b.SYNC5-a.SYNC5));for(let j=1;j<result[i].length;j++)isFolder&&(result[i][0].children=result[i][0].children.concat(result[i][j].children),result[i][j].children=[]),removeDuplicateItems.push(result[i][j]),tree.children=tree.children.filter((item=>item.id!==result[i][j].id))}for(let i=0;i<tree.children.length;i++)tree.children[i].parent!==tree.id&&(tree.children[i].parent=tree.id,moveChildrenDuplicateItems.push(tree.children[i]));for(let i=0;i<tree.children.length;i++)mergeDuplicateBookmarks(tree.children[i])}}async function getDBTabTreeForManager(){var i,result=await DB.Query.tabs({selection:["_ID as id","DEVICE_ID as deviceId","DEVICE_NAME as deviceName","TAB_TITLE as title","TAB_URL as url"],where:{equals:[{key:"IS_DELETED",value:"0"},{key:"ACCOUNT_NAME",value:storageLocalApi.getItem("ACCOUNT_NAME")}],not_likes:[{key:"DEVICE_ID",value:"Desktop"},{key:"DEVICE_NAME",value:"Firefox"}]},sortOrder:"TAB_INDEX ASC"}),tabs=Array.from(result)||[],deviceIds=[],deviceNames={};for(syncedTabItems=tabs.length,i=0;i<tabs.length;i+=1)deviceIds.indexOf(tabs[i].deviceId)<0&&(deviceIds.push(tabs[i].deviceId),deviceNames[tabs[i].deviceId]=tabs[i].deviceName);var treeAll=Array();for(i=0;i<deviceIds.length;i+=1)treeAll.push({title:deviceNames[deviceIds[i]],id:IMPORTED_MAIN_FOLDER_IDS.TABS-(i+1),parent:IMPORTED_MAIN_FOLDER_IDS.TABS,position:`${i+1}`,folder:"1",type:"tab",children:[]}),treeAll[i].children=tabs.filter((tab=>tab.deviceId===deviceIds[i])).map((tab=>Object.assign({folder:0,type:"tab"},tab)));return treeAll}async function getDBTreeForManager(){var[bookmarkTree,tabTree]=await Promise.all([getDBBookmarkTreeForManager(),getDBTabTreeForManager()]),treeAll=Array();return treeAll.push({title:BOOKMARKS,id:IMPORTED_MAIN_FOLDER_IDS.BOOKMARKS,parent:"-1",position:"1",folder:"1",type:"bookmark",children:[]}),treeAll[0].children=bookmarkTree,treeAll}async function updatePosition(children){for(var parentId=getParentId(children[0]),ids="",i=0;i<children.length;i++){ids+=i<children.length-1?String(children[i].data.id)+",":String(children[i].data.id)}const resultForChild=await DB.Query.bookmarks({selection:["_ID as id","POSITION as position","PARENT as parent"],where:{equals:[{key:"IS_DELETED",value:"0"}],ins:[{key:"_ID",value:ids.split(",").map((id=>parseInt(id)))}]},sortOrder:"POSITION ASC"});if(null==resultForChild)return;const childItems=Array.from(resultForChild)||[];var sync4="";if(0!==parentId){const resultForParent=await DB.Query.bookmarks({selection:["_ID as id","SYNC4 as sync4"],where:{equals:[{key:"_ID",value:parentId},{key:"IS_DELETED",value:"0"}]}});if(null==resultForParent)return;const parentItems=Array.from(resultForParent)||[];parentItems.length&&(sync4=parentItems[0].sync4)}else sync4="0";ids="";var updateItems={};for(i=0;i<childItems.length;i++){for(var po=0,j=0;j<children.length;j++)if(children[j].data.id==childItems[i].id){po=children[j].data.position;break}childItems[i].position==po&&childItems[i].parent==parentId||(""!=ids&&(ids+=","),ids+=childItems[i].id,updateItems[childItems[i].id]={PARENT:parentId,DIRTY:1,SYNC5:"0",SYNC3:sync4,POSITION:po},updateItems[childItems[i].id]._ID=childItems[i].id,` WHEN ${childItems[i].id} THEN ${po}`)}DB.UpdateMultiple.bookmarks({items:updateItems,where:{ins:[{key:"_ID",value:ids.split(",").map((id=>parseInt(id)))}]}})}const openUrl=(urls=[],type="OPEN_NEW_TAB")=>{switch(type){case"OPEN":{const[url]=urls;updateTabInCurrentWindowWithoutClose(url);break}case"OPEN_NEW_TAB":createTabInCurrentWindowWithoutClose(...urls);break;case"OPEN_NEW_WINDOW":createTabsInWindowWithoutClose(urls);break;case"OPEN_NEW_SECRET_WINDOW":createTabsInSecretWindowWithoutClose(urls);break;case"OPEN_ALL_BOOKMARKS":for(var i=0;i<urls.length;i++){createTabInCurrentWindowWithoutClose(...urls[i])}break;case"OPEN_ALL_NEW_WINDOW":for(i=0;i<urls.length;i++){let url=urls[i];createTabsInWindowWithoutClose(url)}break;case"OPEN_ALL_NEW_SECRET_WINDOW":for(i=0;i<urls.length;i++){let url=urls[i];createTabsInSecretWindowWithoutClose(url)}}},createTabForURLWithoutClose=(url,windowId)=>new Promise((resolve=>chrome.tabs.create({windowId:windowId,url:url},resolve))),createTabForEachURLWithoutClose=(urls,windowId)=>Promise.all(urls.map((url=>createTabForURLWithoutClose(url,windowId)))),createTabsInWindowWithoutClose=(url,...urls)=>new Promise((resolve=>chrome.windows.create({top:100,left:Math.round((screen.width-.75*screen.width)/2),height:Math.round(.75*screen.height),width:Math.round(.75*screen.width),type:"normal",url:url},(win=>createTabForEachURLWithoutClose(urls,win.id))))),createTabsInSecretWindowWithoutClose=(url,...urls)=>new Promise((resolve=>chrome.windows.create({top:100,left:Math.round((screen.width-.75*screen.width)/2),height:Math.round(.75*screen.height),width:Math.round(.75*screen.width),type:"normal",incognito:!0,url:url},(win=>createTabForEachURLWithoutClose(urls,win.id)))));function updateTabInCurrentWindowWithoutClose(url){chrome.tabs.query({active:!0,currentWindow:!0},(function(tabs){chrome.tabs.update(tabs[0].id,{url:url})}))}function createTabInCurrentWindowWithoutClose(...urls){chrome.windows.getCurrent((win=>createTabForEachURLWithoutClose(urls,win.id)))}