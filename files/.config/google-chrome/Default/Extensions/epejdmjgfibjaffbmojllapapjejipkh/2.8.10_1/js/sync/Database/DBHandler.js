function DBHandler(){SamsungSCloudSyncService.SyncLogs.log("DBHandler constructor"),this.LOCAL_DATABASE=null,this.LOCAL_DATABASE_SIZE=5242880,this.CREATE_BOOKMARKS="CREATE TABLE IF NOT EXISTS BOOKMARKS(_ID INTEGER PRIMARY KEY AUTOINCREMENT, BOOKMARK_ID INTEGER DEFAULT 0 NOT NULL,URL TEXT,TITLE TEXT,FAVICON BLOB,FOLDER INTEGER DEFAULT 0 NOT NULL,PARENT INTEGER DEFAULT 0 NOT NULL,INSERT_AFTER INTEGER DEFAULT 0 NOT NULL, POSITION INTEGER DEFAULT 0 NOT NULL,TAGS TEXT,SOURCEID TEXT,IS_DELETED INTEGER DEFAULT 0 NOT NULL,CREATED INTEGER DEFAULT 0 NOT NULL,MODIFIED INTEGER DEFAULT 0 NOT NULL,DIRTY INTEGER DEFAULT 0 NOT NULL,ACCOUNT_NAME TEXT,ACCOUNT_TYPE TEXT,DEVICE_ID TEXT,DEVICE_NAME TEXT,SYNC1 TEXT UNIQUE,SYNC2 TEXT,SYNC3 TEXT,SYNC4 TEXT,SYNC5 TEXT,IS_COMMITED INTEGER DEFAULT 0 NOT NULL,DOMINANT_COLOR INTEGER DEFAULT 0 NOT NULL)",this.CREATE_TABS="CREATE TABLE IF NOT EXISTS TABS(_ID INTEGER PRIMARY KEY AUTOINCREMENT,TAB_ID INTEGER, TAB_INDEX INTEGER,TAB_URL TEXT,TAB_TITLE TEXT,TAB_FAV_ICON BLOB,TAB_ACTIVATE INTEGER,IS_DELETED INTEGER DEFAULT 0,IS_INCOGNITO INTEGER DEFAULT 0,ACCOUNT_NAME TEXT,ACCOUNT_TYPE TEXT,DATE_CREATED INTEGER,DATE_MODIFIED INTEGER,DIRTY INTEGER DEFAULT 0,SYNC1 TEXT UNIQUE,SYNC2 TEXT,SYNC3 TEXT,SYNC4 TEXT,SYNC5 TEXT,DEVICE_NAME TEXT,DEVICE_ID TEXT,DEVICE_TYPE TEXT,TAB_USAGE TEXT DEFAULT NULL)",this.connect=function(){if(!this.LOCAL_DATABASE)try{this.LOCAL_DATABASE=window.openDatabase("SamsungSCloudSyncStorage","","Database for Chrome Sync Extension",this.LOCAL_DATABASE_SIZE,(()=>{SamsungSCloudSyncService.SyncLogs.log("connect: New DB Created ")}))}catch(e){SamsungSCloudSyncService.SyncLogs.log(`connect: Exception : ${e.message}`)}},this.createTables=function(){SamsungSCloudSyncService.SyncLogs.log("createTables: Creating Tables"),this.execute(this.CREATE_BOOKMARKS,[],(()=>{SamsungSCloudSyncService.SyncLogs.log("createTables BOOKMARKS SUCCEEDED"),this.addNewColumns()})),this.execute(this.CREATE_TABS,[],(()=>{SamsungSCloudSyncService.SyncLogs.log("createTables TAB SUCCEEDED"),this.addNewColumns()}))},this.addNewColumns=function(newColumns={DOMINANT_COLOR:"INTEGER NOT NULL DEFAULT 0"}){Object.keys(newColumns).forEach((columnName=>{this.execute(`SELECT ${columnName} FROM BOOKMARKS`,[],(noError=>{if(null==noError){const query=`ALTER TABLE BOOKMARKS ADD COLUMN ${columnName} ${newColumns[columnName]}`;this.execute(query,[],(_=>SamsungSCloudSyncService.SyncLogs.log(`added ${columnName} to BOOKMARKS`)))}else SamsungSCloudSyncService.SyncLogs.log(`${columnName} already exists in BOOKMARKS`)}),!0)}))},this.execute=function(commandString,args,callBack,ignore=!1){const that=this;this.LOCAL_DATABASE.transaction((tx=>{tx.executeSql(commandString,args,((tx,result)=>{callBack&&callBack(result)}))}),(ex=>{"unable to begin transaction (3850 disk I/O error)"===ex.message?this.execute(commandString,args,callBack,ignore):(callBack&&callBack(null),ignore||that.sqlExecuteERR(ex,commandString,args))}))},this.sqlExecuteERR=function(ex,commandString,args){console.error(ex,commandString,args),SamsungSCloudSyncService.SyncLogs.error(`ERROR IN DATABASE & ERROR CODE = ${ex.message}`)}}