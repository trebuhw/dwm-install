function PasswordService(){this.callbacks={},this.checkConnectToPcAppTimeout=6e4,this.appName=PC_PASS_APP_ID,this.pcAppUserId="",this.psck="",this.secureConnected=!1,this.passAppSignedIn=!1,this.status=PASS_APP_STATUS.NOT_INSTALLED,this.messageTimeout=PASS_APP_RESPONSE_TIMEOUT,this.lastTimeChecked=0,this.lastTimeGetPassUser=0,this.key="",this.keyString=null,this.iv=null,this.ivString="",this.sPassUserId="",this.sPassDeviceId="",this.sPassDeviceCertBase64="",this.sPassServerCertBase64="",this.sPassAppPublicKey=null,this.verifyByTabId=null,this.sPassAppPublicKeyPem="",this.SPassRootCert=PASS_ROOT_CERT,this.onGettingServerCert=!1,this.onRequestSecure=!1,this.init()}PasswordService.prototype={async init(){storageLocalApi.waitForAvailable().then((async()=>{isLoggedIn()&&(storageLocalApi.getItem("COUNTRY_CODE")||getUserCountryCode(),this.connectNative())}))},async getServerCert(opt){return SamsungSCloudSyncService.PassLogs.log("PC Connection: getting server cert"),new Promise(((resolve,reject)=>{if(this.onGettingServerCert)return void resolve();this.onGettingServerCert=!0;const random=sha256([Date.now()]),reqId=`${random.slice(0,8)}-${random.slice(8,12)}-${random.slice(12,16)}-${random.slice(16,20)}-${random.slice(20,32)}`,url=`${PASS_SERVER_URL}?access_token=${storageLocalApi.getItem(ACCESS_TOKEN)}&uid=${storageLocalApi.getItem(USER_ID)}&reqId=${reqId}`,headers={"x-spass-sacc2":storageLocalApi.getItem("COUNTRY_CODE"),"x-sc-appId":APP_ID,"x-spass-usrId":this.sPassUserId,"x-spass-dvcId":this.sPassDeviceId,"x-spass-ext-id":EXTENSION_ID};fetch(url,{headers:headers}).then((resp=>resp.json())).then((resp=>{if(this.onGettingServerCert=!1,resp.certificate&&resp.certificateChain){this.sPassDeviceCertBase64=resp.certificate,this.sPassServerCertBase64=resp.certificateChain[0];const data={rootCert:this.SPassRootCert,deviceCert:this.sPassDeviceCertBase64,serverCert:this.sPassServerCertBase64};storageLocalApi.setArrayItems([["SERVER_CERT",data]]).then((()=>{SamsungSCloudSyncService.PassLogs.log("PC Connection: get server cert success"),opt&&opt.fromPopup?chrome.runtime.sendMessage({cmd:"VERIFY_SERVER_CERT_IN_POPUP"}):chrome.tabs.query({url:["http://*/*","https://*/*"]},(tabs=>{const tabIds=tabs.filter((tab=>"complete"==tab.status)).map((tab=>tab.id));if(tabIds.length){const verifyTabId=tabIds.indexOf(this.verifyByTabId)>=0?this.verifyByTabId:tabIds[0];chrome.tabs.sendMessage(verifyTabId,{cmd:"VERIFY_SERVER_CERT"})}})),resolve()}))}else SamsungSCloudSyncService.PassLogs.log("PC Connection: get server cert fail"),resp.resultCode==RESPONSE_CODE.BAD_ACCESS_TOKEN&&refreshAccessToken(storageLocalApi.getItem(REFRESH_TOKEN)).then((({token:token,refreshToken:refreshToken,tokenExpiresIn:tokenExpiresIn,refreshTokenExpiresIn:refreshTokenExpiresIn})=>updateAccessToken(token).then((async()=>{SamsungSCloudSyncService.SyncLogs.log("Refreshed successfully"),storeAccessToken(token),await storageLocalApi.setArrayItems([[REFRESH_TOKEN,refreshToken],[REFRESH_TOKEN_EXPIRES_IN,refreshTokenExpiresIn]]),this.getServerCert(opt)}))))})).catch((error=>{this.onGettingServerCert=!1}))}))},async getPassPublicKey(){return new Promise((async(resolve,reject)=>{try{this.sPassAppPublicKey=await this.importRsaKey(this.sPassAppPublicKeyPem),resolve()}catch(error){SamsungSCloudSyncService.PassLogs.log(error),reject(error)}}))},async connectSecureSuccess(data){SamsungSCloudSyncService.PassLogs.log("PC Connection: verify certificate success"),this.sPassAppPublicKeyPem=data.devicePublicKeyPem,this.sPassAppPublicKey=await this.importRsaKey(this.sPassAppPublicKeyPem),this.requestSecureCommunication()},async connectNative(){return this.lastTimeChecked=Date.now(),new Promise((async(resolve,reject)=>{try{SamsungSCloudSyncService.PassLogs.log("PC Connection: connecting to pc app"),this.port=chrome.runtime.connectNative(this.appName),this.port.onDisconnect.addListener(this.onNativeMessageDisconnect.bind(this)),this.port.onMessage.addListener(this.onReceiveNativeMessage.bind(this)),this.status==PASS_APP_STATUS.NOT_INSTALLED&&await this.setStatus(PASS_APP_STATUS.NOT_ACTIVE),this.port?resolve():reject()}catch(error){SamsungSCloudSyncService.PassLogs.log(error),SamsungSCloudSyncService.PassLogs.log("PC Connection: connect to pc app fail"),reject(error)}}))},async onNativeMessageDisconnect(ev){SamsungSCloudSyncService.PassLogs.log(ev),SamsungSCloudSyncService.PassLogs.log("PC Connection: connect to pc app is disconnected"),await this.setStatus(PASS_APP_STATUS.NOT_INSTALLED)},setStatus(value){return new Promise(((resolve,reject)=>{this.status==PASS_APP_STATUS.SECURED&&value!=PASS_APP_STATUS.SECURED&&SamsungSCloudSyncService.passwordTabsGlobal.removePcCredentials(),this.status=value,SamsungSCloudSyncService.PassLogs.log("PC Connection: Connect status: "+value),storageLocalApi.setItem("PASS_APP_STATUS",value).then(resolve)}))},async onReceiveNativeMessage(message){const{messageId:messageId,result:result,cmd:cmd}=message;if(this.callbacks[messageId]&&this.callbacks[messageId].sendTime&&SamsungSCloudSyncService.PassLogs.log(`Duration of ${cmd}-${messageId} = ${Date.now()-this.callbacks[messageId].sendTime}`),result&&result.encryptedData){const decryptedData=await this.descrypt(result.encryptedData);result.data=decryptedData}SamsungSCloudSyncService.PassLogs.log(`PC Connection: on receive message from app ${cmd} ${messageId} ${result&&result.data?JSON.stringify(result.data):""}`),this.callbacks[messageId]&&(this.callbacks[messageId].callback&&this.callbacks[messageId].callback(result),this.callbacks[messageId].timeout&&clearTimeout(this.callbacks[messageId].timeout),delete this.callbacks[messageId]),result.code==RESPONSE_CODE.UNAUTHORIZED?this.clearSecureConnection():result.code==RESPONSE_CODE.UNAUTHENTICATED?this.clearSecureConnection(PASS_APP_STATUS.NOT_SAME_USER_ID):result.code==RESPONSE_CODE.UNAVAILABLE&&await this.setStatus(PASS_APP_STATUS.NOT_INSTALLED_FULL)},addCallback(message,callback){const messageId=message.messageId;this.callbacks[messageId]={},callback&&(this.callbacks[messageId]={callback:callback}),this.callbacks[messageId].sendTime=Date.now(),this.callbacks[messageId].timeout=setTimeout((async()=>{SamsungSCloudSyncService.PassLogs.log(`${message.cmd} ${messageId} over ${this.messageTimeout}`),"REQUEST_SECURE_COMMUNICATION"==message.cmd&&(this.onRequestSecure=!1),delete this.callbacks[messageId]}),this.messageTimeout)},async sendNativeMassage(msg,callback){const messageId=this.generateMessageId();SamsungSCloudSyncService.PassLogs.log("PC Connection: send native message "+JSON.stringify(msg));const data=Object.assign({},msg.data);delete msg.data,data.accountInfo={accountId:storageLocalApi.getItem(USER_ID)};const encryptedData=await this.encrypt(data);msg.encryptedData=this.ab2Base64(encryptedData),msg.messageId=messageId,this.addCallback(msg,callback),this.port.postMessage(JSON.parse(JSON.stringify(msg)))},generateMessageId:()=>sha256([Date.now(),Math.random()].join("_")).slice(0,32),encode:string=>(new TextEncoder).encode(string),decode:uint=>new TextDecoder("utf8").decode(uint),str2ab(str){const buf=new ArrayBuffer(str.length),bufView=new Uint8Array(buf);for(let i=0,strLen=str.length;i<strLen;i++)bufView[i]=str.charCodeAt(i);return buf},ab2str:buf=>String.fromCharCode.apply(null,new Uint8Array(buf)),ab2Base64(buffer){for(var binary="",bytes=new Uint8Array(buffer),len=bytes.byteLength,i=0;i<len;i++)binary+=String.fromCharCode(bytes[i]);return btoa(binary)},base64ToArrayBuffer(base64){for(var binary_string=atob(base64),len=binary_string.length,bytes=new Uint8Array(len),i=0;i<len;i++)bytes[i]=binary_string.charCodeAt(i);return bytes.buffer},async importCbcKey(binaryDerString){const binaryDer=this.str2ab(binaryDerString);return crypto.subtle.importKey("raw",binaryDer,{name:"AES-CBC",hash:"SHA-256"},!0,["encrypt","decrypt"])},async generateKeyIv(){return new Promise((async(resolve,reject)=>{try{this.keyString=sha256([Date.now()]).slice(0,32),this.ivString=sha256([Date.now()]).slice(0,16),this.iv=this.encode(this.ivString),this.key=await this.importCbcKey(this.keyString),storageLocalApi.setArrayItems([["EXTENSION_AES_CBC_KEY",this.keyString],["EXTENSION_AES_CBC_IV",this.ivString]]).then((()=>{resolve(this.key)}))}catch(error){SamsungSCloudSyncService.PassLogs.log(error),reject(error)}}))},async encrypt(msg){const encoded=this.encode(JSON.stringify(msg));return await crypto.subtle.encrypt({name:"AES-CBC",iv:this.iv},this.key,encoded)},async descrypt(value){const ab=await this.base64ToArrayBuffer(value);let decrypted=await crypto.subtle.decrypt({name:"AES-CBC",iv:this.iv},this.key,ab);const result=this.decode(decrypted);return JSON.parse(result)},importRsaKey(pem){const pemContents=pem.replace("-----BEGIN PUBLIC KEY-----","").replace("-----END PUBLIC KEY-----",""),binaryDerString=atob(pemContents),binaryDer=this.str2ab(binaryDerString);return crypto.subtle.importKey("spki",binaryDer,{name:"RSA-OAEP",hash:"SHA-256"},!0,["encrypt"])},importSignatureKey(pem,algorithmName){const pemContents=pem.replace("-----BEGIN PUBLIC KEY-----","").replace("-----END PUBLIC KEY-----",""),binaryDerString=atob(pemContents),binaryDer=this.str2ab(binaryDerString);return crypto.subtle.importKey("spki",binaryDer,{name:algorithmName||"RSA-PSS",hash:"SHA-256"},!0,["verify"])},async requestSecureCommunication(){if(this.onRequestSecure)return;this.onRequestSecure=!0,SamsungSCloudSyncService.PassLogs.log("PC Connection: start request secure connection"),SamsungSCloudSyncService.PassLogs.log("PC Connection: generating key, iv"),await this.generateKeyIv();const messageId=this.generateMessageId();this.signedNonce=sha256([Date.now()]).slice(0,16);const message={cmd:"REQUEST_SECURE_COMMUNICATION",messageId:messageId},data={accountInfo:{accountId:storageLocalApi.getItem(USER_ID)},keyData:{extensionSessionKey:this.keyString,iv:this.ivString},validationData:{signedNonce:this.signedNonce}},encryptString=JSON.stringify(data),encoded=this.encode(encryptString);try{const encryptedData=await crypto.subtle.encrypt({name:"RSA-OAEP"},this.sPassAppPublicKey,encoded);message.encryptedData=this.ab2Base64(encryptedData),this.addCallback(message,this.onSecureComunicationCalback.bind(this)),SamsungSCloudSyncService.PassLogs.log("PC Connection: REQUEST_SECURE_COMMUNICATION messageId=",message.messageId),this.port.postMessage(JSON.parse(JSON.stringify(message)))}catch(error){SamsungSCloudSyncService.PassLogs.log(error),this.onRequestSecure=!1}},async onSecureComunicationCalback(result){if(SamsungSCloudSyncService.PassLogs.log("PC Connection: secure connection response"),200==result.code){if(result.data&&result.data.validationData){let sPassAppSignatureKey=await this.importSignatureKey(this.sPassAppPublicKeyPem);const signature=this.base64ToArrayBuffer(result.data.validationData.signedNonce),signData=this.encode(this.signedNonce);let verify;SamsungSCloudSyncService.PassLogs.log(this.base64ToArrayBuffer(result.data.validationData.signedNonce));try{verify=await crypto.subtle.verify({name:"RSA-PSS",saltLength:32},sPassAppSignatureKey,signature,signData)}catch(error){SamsungSCloudSyncService.PassLogs.log("PC Connection: secure connection validate error "+JSON.stringify(error))}if(!verify){SamsungSCloudSyncService.PassLogs.log("PC Connection: validate fail, verify again by RSASSA-PKCS1-v1_5"),sPassAppSignatureKey=await this.importSignatureKey(this.sPassAppPublicKeyPem,"RSASSA-PKCS1-v1_5");try{verify=await crypto.subtle.verify("RSASSA-PKCS1-v1_5",sPassAppSignatureKey,signature,signData)}catch(error){SamsungSCloudSyncService.PassLogs.log("PC Connection: secure connection validate error "+JSON.stringify(error))}}verify?(SamsungSCloudSyncService.PassLogs.log("PC Connection: secure connection validate success"),await this.setStatus(PASS_APP_STATUS.SECURED),SamsungSCloudSyncService.passwordTabsGlobal.getCredentialFromPc()):SamsungSCloudSyncService.PassLogs.log("PC Connection: secure connection validate fail")}}else SamsungSCloudSyncService.PassLogs.log("result error"+result.code);this.onRequestSecure=!1},checkPassAppSignedIn(opt){isLoggedIn()&&(this.status==PASS_APP_STATUS.NOT_INSTALLED?Date.now()-this.lastTimeChecked>this.messageTimeout&&this.connectNative().then(this.checkPassAppSignedIn.bind(this)):(SamsungSCloudSyncService.PassLogs.log("PC Connection: getting userid and deviceid"),this.getDeviceUserValidation((async result=>{SamsungSCloudSyncService.PassLogs.log("PC Connection: Get userid and deviceid successfully"),result.data&&result.data.signInInfo&&result.data.signInInfo.userId&&(this.sPassUserId&&this.sPassUserId==result.data.signInInfo.userId||(this.sPassUserId=result.data.signInInfo.userId,await this.setStatus(PASS_APP_STATUS.NOT_SECURE))),result.data&&result.data.signInInfo&&result.data.signInInfo.deviceId&&(this.sPassDeviceId=result.data.signInInfo.deviceId),result.data&&result.data.signInInfo&&result.data.signInInfo.userId?this.status!=PASS_APP_STATUS.SECURED&&(SamsungSCloudSyncService.PassLogs.log("PC Connection: pc logged in but not secure"),await this.setStatus(PASS_APP_STATUS.NOT_SECURE)):(SamsungSCloudSyncService.PassLogs.log("PC Connection: Missing userid => pc not logged in"),await this.setStatus(PASS_APP_STATUS.NOT_ACTIVE)),this.status==PASS_APP_STATUS.NOT_SECURE&&this.getServerCert(opt)}))))},getDeviceUserValidation(callback){const msg={cmd:"REQUEST_GET_SIGN_IN_INFO",messageId:this.generateMessageId(),data:{accountInfo:{accountId:storageLocalApi.getItem(USER_ID)}}};this.addCallback(msg,callback),this.port.postMessage(JSON.parse(JSON.stringify(msg)))},async clearSecureConnection(status){await this.setStatus(status||PASS_APP_STATUS.NOT_SECURE),storageLocalApi.setArrayItems([["SPASS_USER_ID",""],["EXTENSION_AES_CBC_KEY",""],["EXTENSION_AES_CBC_IV",""]]).then((()=>{this.iv=null,this.key=null,this.ivString="",this.keyString=""}))},getCredentials(filter,callback,extraQuery={}){if(this.status==PASS_APP_STATUS.SECURED){const msg={cmd:"REQUEST_GET_CREDENTIAL",data:{filter:filter,...extraQuery}};this.sendNativeMassage(msg,callback)}},saveCredential(credential,callback){const msg={cmd:"REQUEST_ADD_CREDENTIAL",data:{credential:credential}};this.sendNativeMassage(msg,callback)},updateCredential(credential,callback){const msg={cmd:"REQUEST_UPDATE_CREDENTIAL",data:{credential:credential}};this.sendNativeMassage(msg,callback)},removeCredential(credential,callback){const msg={cmd:"REQUEST_DELETE_CREDENTIAL",data:{credential:credential}};this.sendNativeMassage(msg,callback)},isExcludedWebsite(url,callback){const msg={cmd:"REQUEST_IS_EXCLUDED_WEBSITE",messageId:this.generateMessageId(),data:{accountInfo:{accountId:storageLocalApi.getItem(USER_ID)},hostUrl:url}};this.addCallback(msg,callback),this.port.postMessage(JSON.parse(JSON.stringify(msg)))},addExcludedWebsite(url,callback){const msg={cmd:"REQUEST_ADD_EXCLUDED_WEBSITE",messageId:this.generateMessageId(),data:{accountInfo:{accountId:storageLocalApi.getItem(USER_ID)},hostUrl:url}};this.addCallback(msg,callback),this.port.postMessage(JSON.parse(JSON.stringify(msg)))}},SamsungSCloudSyncService.passwordService=new PasswordService;