function NetworkClient(){this.TAG="NetworkClient",this.OCTET_STREAM="application/octet-stream",this.JSON_CONTENT="application/json;charset=utf-8",this.mHttpClient=null,SamsungSCloudSyncService.NetworkClientGlobal=this,this.getRequest=function(){const url=arguments[0],headername=arguments[1],headervalue=arguments[2];if(this.callBack=arguments[3],1==arguments.length||4==arguments.length){if(navigator.onLine)this.getXMLHttpRequest(url,headername?[[headername,headervalue]]:[]);else{const response={CONNECTIVITY:SamsungSCloudSyncService.INTERNET_FAILURE_TEXT};SamsungSCloudSyncService.NetworkClientGlobal.onFailureResponse(response,!0)}}},this.postRequest=function(url,json){if(navigator.onLine){const reqHeaders=new Headers;reqHeaders.append("Content-type",this.JSON_CONTENT),fetch(url,{method:"POST",headers:reqHeaders,body:json}).then((response=>{SamsungSCloudSyncService.NetworkClientGlobal.onSuccessResponse(response)})).catch((error=>{SamsungSCloudSyncService.SyncLogs.log(`(postRequest) Request error: ${url}`),SamsungSCloudSyncService.SyncLogs.error(error),SamsungSCloudSyncService.NetworkClientGlobal.onFailureResponse(error)}))}else{const response={CONNECTIVITY:SamsungSCloudSyncService.INTERNET_FAILURE_TEXT};SamsungSCloudSyncService.NetworkClientGlobal.onFailureResponse(response,!0)}},this.onFailureResponse=async function(response,flag){try{if(await storageLocalApi.setItem(SYNC_STATUS,SYNC_COMPLETED),SamsungSCloudSyncService.BrowserOverlay.clearSyncTimeoutInterval(),SamsungSCloudSyncService.BrowserOverlay.clearAutoSyncTimeoutInterval(!1),flag)chrome.runtime.sendMessage({CONNECTIVITY:SamsungSCloudSyncService.INTERNET_FAILURE_TEXT});else{var responseText;response&&(responseText=response.responseText?response.responseText:await response.text(),SamsungSCloudSyncService.SyncLogs.log(`On Failure Response (URL): ${response.url}`),SamsungSCloudSyncService.SyncLogs.log(`On Failure Response (status): ${response.status}`),SamsungSCloudSyncService.SyncLogs.log(`On Failure Response (text): ${responseText}`));const{rcode:rcode,rmsg:rmsg}=JSON.parse(responseText);if(20002!=rcode&&29006!=rcode||SamsungSCloudSyncService.mBrowserBookmarkSyncAdapter.handleError(rcode),19018==rcode||19008==rcode)return SamsungSCloudSyncService.SyncLogs.log("Trying to refresh token"),void refreshAccessToken(storageLocalApi.getItem(REFRESH_TOKEN)).then((({token:token,refreshToken:refreshToken,tokenExpiresIn:tokenExpiresIn,refreshTokenExpiresIn:refreshTokenExpiresIn})=>updateAccessToken(token).then((async()=>{SamsungSCloudSyncService.SyncLogs.log("Refreshed successfully"),storeAccessToken(token),await storageLocalApi.setArrayItems([[REFRESH_TOKEN,refreshToken],[REFRESH_TOKEN_EXPIRES_IN,refreshTokenExpiresIn]]),SamsungSCloudSyncService.BrowserOverlay.refreshSyncProcess()})))).catch((err=>{SamsungSCloudSyncService.SyncLogs.log("Problem in refreshing token"),SamsungSCloudSyncService.SyncLogs.log(JSON.stringify(err)),console.error(err),cleanupStateOnLogout(),chrome.runtime.sendMessage({ACCESS_TOKEN_URL_PROBLEM:"SESSION_EXPIRED"})}));SamsungSCloudSyncService.SyncLogs.error(`HTTP Request Failed: ${rmsg}`),chrome.runtime.sendMessage({ERROR:`HTTP Request Failed: ${rcode}`}),SamsungSCloudSyncService.SyncLogs.log("onFailureResponse: HTTP Request Failed")}}catch(e){SamsungSCloudSyncService.SyncLogs.error(`Can't parse response: ${response.responseText}`),chrome.runtime.sendMessage({ERROR:"Bad response"}),SamsungSCloudSyncService.SyncLogs.log("onFailureResponse: Bad response")}},this.onSuccessResponse=async function(response,headerjson){var parseData,responseText;if(200==response.status){if(responseText=await response.text(),SamsungSCloudSyncService.SyncLogs.log(`On Success Response (URL): ${response.url}`),SamsungSCloudSyncService.SyncLogs.log(`On Success Response (text): ${responseText}`),!(responseText&&responseText.length>0))return void SamsungSCloudSyncService.SyncLogs.log("onSuccessResponse: Retruned");parseData=JSON.parse(responseText)}(500==response.status||400==response.status||parseData&&0!=parseData.rcode)&&SamsungSCloudSyncService.NetworkClientGlobal.onFailureResponse(response);if(null!=SamsungSCloudSyncService.startKey&&parseData&&parseData.nextKey==SamsungSCloudSyncService.startKey)return void SamsungSCloudSyncService.SyncLogs.log("onSuccessResponse: Retruned");SamsungSCloudSyncService.mNetworkResponse||(SamsungSCloudSyncService.mNetworkResponse=new NetworkResponse);const contenttype=response.headers.get("Content-type").toUpperCase().replace(/ /gi,"");contenttype==SamsungSCloudSyncService.NetworkClientGlobal.JSON_CONTENT.toUpperCase()?SamsungSCloudSyncService.mNetworkResponse.setBody(responseText):contenttype==SamsungSCloudSyncService.NetworkClientGlobal.OCTET_STREAM.toUpperCase()?SamsungSCloudSyncService.mNetworkResponse.setFileInStream(response):(console.error("onSuccessResponse: Unknown Header type"),SamsungSCloudSyncService.SyncLogs.error("onSuccessResponse: Unknown Header type"),SamsungSCloudSyncService.NetworkClientGlobal.onFailureResponse(response));SamsungSCloudSyncService.NetworkClientGlobal.callBack&&SamsungSCloudSyncService.NetworkClientGlobal.callBack(SamsungSCloudSyncService.mNetworkResponse)},this.getFile=function(Url){this.requestFile(Url)},this.requestFile=function(Url){},this.postMultiPart=function(){},this.encodeUrl=function(url){return encodeURIComponent(url)},this.getWithHeader=function(url,headerName,headerValue){this.getRequest(url,headerName,headerValue)},this.getXMLHttpRequest=function(url,headers=[]){if(navigator.onLine){const reqHeaders=new Headers;headers.length>0&&headers.forEach((([key,value])=>reqHeaders.append(key,value))),fetch(url,{method:"GET",headers:reqHeaders}).then((response=>{SamsungSCloudSyncService.NetworkClientGlobal.onSuccessResponse(response)})).catch((error=>{SamsungSCloudSyncService.SyncLogs.log(`(getXMLHttpRequest) Request error: ${url}`),SamsungSCloudSyncService.SyncLogs.error(error),SamsungSCloudSyncService.NetworkClientGlobal.onFailureResponse(error)}))}else SamsungSCloudSyncService.SyncLogs.log("getXMLHttpRequest: Internet connection is not there")}}SamsungSCloudSyncService.NetworkClientGlobal=null;