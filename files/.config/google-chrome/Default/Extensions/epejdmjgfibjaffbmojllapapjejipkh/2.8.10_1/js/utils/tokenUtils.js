const timeoutPromise=(timeout,data)=>new Promise((resolve=>setTimeout(resolve,timeout,data)));async function refreshAccessToken(_refreshToken){if(!_refreshToken)throw new Error("NO_REFRESH_TOKEN");await isFromChina();const url=APIS.GET_AUTH_URL(),options={method:"POST",body:["grant_type=refresh_token",`client_id=${APP_ID}`,`client_secret=${APP_SECRET}`,`refresh_token=${_refreshToken}`].join("&").trim(),headers:{Accept:"application/json","Content-Type":"application/x-www-form-urlencoded"}},response=await Promise.race([fetch(url,options),timeoutPromise(TIMEOUT_MS,"TIMEOUT")]);if("TIMEOUT"===response)throw new Error("Encountered timeout during refreshing token");const data=await response.json();if(SamsungSCloudSyncService.SyncLogs.log(data),200!==response.status)throw new Error("BAD_RESPONSE");const{refresh_token:refreshToken,refresh_token_expires_in:refreshTokenExpiresIn,access_token:token,access_token_expires_in:tokenExpiresIn}=data;return{token:token,tokenExpiresIn:tokenExpiresIn,refreshToken:refreshToken,refreshTokenExpiresIn:refreshTokenExpiresIn}}function updateAccessToken(token,isRefresh=!0){return(SamsungSCloudSyncService.sAuthManager||new AuthManager).setAccessToken(token,isRefresh)}async function storeAccessToken(token){const uid=storageLocalApi.getItem(USER_ID);await storageLocalApi.setArrayItems([[ACCESS_TOKEN,token],[ACCESS_TOKEN_GET_PARAMS,`&uid=${uid}&access_token=${token}`],[ACCESS_TOKEN_PUT_PARAMS,`&uid=${uid}&access_token=${token}&did=testdid`]])}