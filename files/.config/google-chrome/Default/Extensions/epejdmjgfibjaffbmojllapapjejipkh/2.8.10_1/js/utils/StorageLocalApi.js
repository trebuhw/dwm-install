function StorageLocalApi(){this.storage=null,chrome.storage.local.get(null,(result=>{this.storage=result||{},chrome.storage.local.onChanged.addListener((event=>{Object.keys(event).forEach((key=>{event[key].newValue?this.storage[key]=event[key].newValue:delete this.storage[key]}))}))}))}StorageLocalApi.prototype={async waitForAvailable(){return new Promise((async(resolve,reject)=>{const delay=time=>new Promise((res=>setTimeout(res,time)));for(;!this.storage;)await delay(100);resolve()}))},get(keys){const result={};return Object.keys(keys).forEach((key=>{result[key]=this.storage[key]})),result},getItem(key){return this.storage[key]},set:objs=>new Promise(((resolve,reject)=>{chrome.storage.local.set(objs,(()=>{if(chrome.runtime.lastError)return reject(chrome.runtime.lastError);resolve()}))})),setItem(key,value){return new Promise(((resolve,reject)=>{const setItem={};setItem[key]=value,this.storage[key]=value,chrome.storage.local.set(setItem,(()=>{if(chrome.runtime.lastError)return reject(chrome.runtime.lastError);resolve()}))}))},setItems(obj){return new Promise(((resolve,reject)=>{chrome.storage.local.set(obj,(()=>{if(chrome.runtime.lastError)return reject(chrome.runtime.lastError);Object.keys(obj).forEach((key=>{this.storage[key]=obj[key]})),resolve()}))}))},setArrayItems(keyValueArray){return new Promise(((resolve,reject)=>{const setItem={};keyValueArray.forEach((item=>{setItem[item[0]]=item[1]})),chrome.storage.local.set(setItem,(()=>{if(chrome.runtime.lastError)return reject(chrome.runtime.lastError);Object.keys(setItem).forEach((key=>{this.storage[key]=setItem[key]})),resolve()}))}))},removeItem:key=>new Promise(((resolve,reject)=>{chrome.storage.local.remove(key,(()=>{if(chrome.runtime.lastError)return reject(chrome.runtime.lastError);resolve()}))})),removeItems:keys=>new Promise(((resolve,reject)=>{chrome.storage.local.remove(keys,(()=>{if(chrome.runtime.lastError)return reject(chrome.runtime.lastError);resolve()}))}))};const storageLocalApi=new StorageLocalApi;