const MoveModal=new Vue({el:"#move-modal-container",data:()=>({modalTitle:SELECT_LOCATION,parent:{id:"0",key:""},selectedBookmarks:[],newFolderKey:"",visible:!1,tree:{},errorMessage:"",shouldSync:!1,isShowNewFolder:!1,isConfirmClicked:!1,targetNode:{}}),mounted(){EventBus.$on("firstSelectLeaf",(leaf=>{this.parent.id=leaf})),EventBus.$on("selectLeaf",(leaf=>{this.errorMessage="",this.parent.id=leaf})),EventBus.$on("isShowNewFolder",(isShowNewFolder=>{this.isShowNewFolder=isShowNewFolder,!isShowNewFolder&&this.isConfirmClicked&&(this.isConfirmClicked=!1,this.confirm())})),EventBus.$on("newFolderInfo",(newFolderInfo=>{if(this.visible){var parentNode=getNodeById(parseInt(newFolderInfo.parent)),node=addNewNode(parentNode,newFolderInfo);this.parent.key=node.key}}))},methods:{toggle(){this.visible=!this.visible},async confirm(){if(this.isShowNewFolder)return void(this.isConfirmClicked=!0);let bookmarks=[];const checkSimilarPromises=Array.from(this.selectedBookmarks).map((item=>{let bookmark={id:item.data.id,parent:this.parent.id,title:item.title,url:item.data.url,isFolder:item.folder};return bookmarks.push(bookmark),checkSimilarBookmark(bookmark)}));if((await Promise.all(checkSimilarPromises)).some((value=>value)))return void(this.errorMessage=BOOKMARK_EXISTS);moveBookmarksCallback(this.parent,this.selectedBookmarks);const updateMoveBookmarks=Array.from(bookmarks).map((bookmark=>updateBookmark(bookmark)));await Promise.all(updateMoveBookmarks),doBookmarkSync(),this.toggle()},createFolder(){EventBus.$emit("showNewFolder",this.parent.id),this.shouldSync=!0},async updateFolderTree(){this.tree={children:[await getDBBookmarkTree()]}}},watch:{async visible(isVisible){if(await storageLocalApi.setItem(IS_MODAL_OPENED,!!isVisible),!isVisible)return this.errorMessage="",this.existingBookmark=!1,void(this.shouldSync&&(doBookmarkSync(),this.shouldSync=!1));await this.updateFolderTree()}}});