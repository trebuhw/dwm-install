function CredentialStorage(){storageLocalApi.waitForAvailable().then((()=>{this.store=storageLocalApi.getItem("CREDENTIAL_STORE")||{},this.notAskToSaveUrlStore=storageLocalApi.getItem("NOT_ASK_TO_SAVE_CREDENTIAL_URLS")||[],this.neverSaveUrlStore=storageLocalApi.getItem("NEVER_SAVE_CREDENTIAL_URLS")||[]}))}CredentialStorage.prototype={addNotAskToSaveUrlStore(url){try{const origin=new URL(url).origin;this.notAskToSaveUrlStore.indexOf(origin)<0&&(this.notAskToSaveUrlStore.push(origin),storageLocalApi.setItem("NOT_ASK_TO_SAVE_CREDENTIAL_URLS",this.notAskToSaveUrlStore))}catch(error){console.log(error)}},checkNotAskToSaveCredential(url){let result=!1;try{const origin=new URL(url).origin;this.notAskToSaveUrlStore.indexOf(origin)>=0&&(result=!0)}catch(error){console.log(error)}return result},addNeverSaveUrlStore(url){try{const origin=new URL(url).origin;this.neverSaveUrlStore.indexOf(origin)<0&&(this.neverSaveUrlStore.push(origin),storageLocalApi.setItem("NEVER_SAVE_CREDENTIAL_URLS",this.neverSaveUrlStore))}catch(error){console.log(error)}},checkNeverSaveCredential(url){let result=!1;try{const origin=new URL(url).origin;this.neverSaveUrlStore.indexOf(origin)>=0&&(result=!0)}catch(error){console.log(error)}return result},getCredentials(originUrl,calback){setTimeout((()=>{calback&&calback(this.store[originUrl]||[])}),200)},saveCredential(credential,calback){this.store[credential.origin]||(this.store[credential.origin]=[]);const index=this.store[credential.origin].findIndex((item=>item.username==credential.username));index>=0?this.store[credential.origin][index]=credential:this.store[credential.origin].push(credential),this.save(),setTimeout((()=>{calback&&calback({code:200})}),200)},removeCredential(credential,calback){this.store[credential.origin]||(this.store[credential.origin]=[]);const index=this.store[credential.origin].findIndex((item=>item.username==credential.username));let result={};index>=0?(this.store[credential.origin].splice(index,1),this.save(),result={code:200,message:"Sucess"}):result={code:400,message:"Fail"},setTimeout((()=>{calback&&calback(result)}),200)},updateCredential(credential,calback){this.store[credential.origin]||(this.store[credential.origin]=[]);const index=this.store[credential.origin].findIndex((item=>item.username==credential.username));let result={};index>=0?(this.store[credential.origin][index]=credential,this.save(),result={code:200,message:"Sucess"}):result={code:400,message:"Fail"},setTimeout((()=>{calback&&calback(result)}),200)},save(){storageLocalApi.setItem("CREDENTIAL_STORE",this.store)},clear(){storageLocalApi.setArrayItems([["NOT_ASK_TO_SAVE_CREDENTIAL_URLS",[]],["NEVER_SAVE_CREDENTIAL_URLS",[]],["CREDENTIAL_STORE",{}]]).then((()=>{this.notAskToSaveUrlStore=[],this.neverSaveUrlStore=[]}))}},SamsungSCloudSyncService.credentialStore=new CredentialStorage;