function handleFileSelect(e){const[file]=e.target.files,reader=new FileReader;return reader.readAsText(file),reader.onloadend=()=>{parseHTMLBookmarks(reader.result)},reader.onerror=()=>{throw new Error("Could not read bookmarks file")},this.value=null,!1}function getDTArray(string){const fragment=document.createElement("html");fragment.innerHTML=string;const rootDL=fragment.querySelector("dl");if(!rootDL)throw new Error("Unexpected bookmark format");return Array.from(rootDL.children).slice(1)}function buildBookmark({title:title,url:url,isFolder:isFolder}){return{title:title,url:url,isFolder:isFolder,created:Date.now(),children:[],folder:isFolder}}function recurseNode(rootNode,rootParentRef,level){if("DT"!==rootNode.tagName)return;const subBookmarksList=Array.from(rootNode.children).find((el=>"DL"===el.tagName)),isFolder=!!subBookmarksList;if(isFolder){var folder;if(level){folder=buildBookmark({title:rootNode.firstElementChild.innerText,isFolder:isFolder}),rootParentRef.children.push(folder)}else folder=rootParentRef;level++;for(let child of Array.from(subBookmarksList.children))recurseNode(child,folder,level)}else{const anchorTag=rootNode.firstElementChild,bookmark=buildBookmark({title:anchorTag.innerText,url:anchorTag.href,isFolder:isFolder});rootParentRef.children.push(bookmark)}}function parseHTMLBookmarks(htmlString){var rootFolder,i,x=document.getElementsByClassName("fancytree-title"),nameExists=0;for(i=0;i<x.length;i++)if("Imported"==x[i].innerHTML){nameExists=1;break}if(nameExists){var n=0;do{for(n++,nameExists=0,i=0;i<x.length;i++)if(x[i].innerHTML=="Imported ("+n+")"){nameExists=1;break}}while(nameExists);rootFolder=buildBookmark({title:"Imported ("+n+")",isFolder:!0})}else rootFolder=buildBookmark({title:"Imported",isFolder:!0});getDTArray(htmlString).forEach((node=>recurseNode(node,rootFolder,0))),insertImportedBookmarks(rootFolder)}async function insertImportedBookmarks(rootRef){let[maxPosition,maxId]=await Promise.all([DB.Max.bookmarks({key:"POSITION"}),DB.Max.bookmarks({key:"_ID"})]);maxPosition=maxPosition||1,maxId=maxId||1;const bookmarkArray=[],treeWalk=(node,parent)=>{const id=++maxId,bookmark=Object.assign({},node,{id:id,position:++maxPosition,parent:parent.id,globalId:createSYNC4({id:id,parent:parent.id}),globalParent:parent.globalId});bookmarkArray.push(addBookmarkMeta(bookmark)),node.children.forEach((child=>treeWalk(child,bookmark)))};treeWalk(rootRef,{}),addNodeWithImport(rootRef);const sCloudBookmarks=bookmarkArray.filter(isValidBookmark);await Promise.all([sCloudBookmarks.map((record=>DB.Insert.bookmarks({data:record})))]),doBookmarkSync()}function addBookmarkMeta(bookmark){const{isFolder:isFolder=!1,url:url="",title:title,id:id,position:position,parent:parent,dominantColor:dominantColor,globalId:globalId,globalParent:globalParent}=bookmark,SERVER_TIMESTAMP=parseInt(storageLocalApi.getItem(BOOKMARK_SERVER_TIME));return prefixedUrl=prefixUrlWithProtocol(url),data={TITLE:sanitizeTitle(title),FOLDER:isFolder?"1":"0",DIRTY:1,IS_DELETED:"0",BOOKMARK_ID:id,POSITION:position,ACCOUNT_NAME:storageLocalApi.getItem("ACCOUNT_NAME"),ACCOUNT_TYPE:storageLocalApi.getItem("ACCOUNT_TYPE"),DEVICE_NAME:EXT_DEVICE_NAME,DEVICE_ID:EXT_DEVICE_ID,CREATED:SERVER_TIMESTAMP,MODIFIED:SERVER_TIMESTAMP,SYNC5:0,PARENT:0,SYNC3:globalParent,SYNC4:globalId,DOMINANT_COLOR:parseInt(defaultIfUndefined(dominantColor,0)),TAGS:null,SOURCEID:"",URL:isFolder?"":prefixedUrl},data}function isValidBookmark({TITLE:TITLE,FOLDER:FOLDER,URL:URL}){return 0!==TITLE.length&&!(!FOLDER&&isBrowserURL(URL))}