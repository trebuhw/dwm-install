async function onDeleteConfirm(e,target){const isImportedFolder=["bookmark_folder","imported"].every((e=>target.classList.contains(e))),isCurrentBrowser=target.dataset&&target.dataset.browser===getBrowserName().toLowerCase(),importFolderDeleted=isImportedFolder&&isCurrentBrowser,dividerTarget=isImportedFolder?bookmarkDataContainer.querySelector(".divider-chrome-folder"):target.parentNode.childNodes[1];importFolderDeleted&&await storageLocalApi.removeItem(LAST_IMPORT_TIME);const{id:bookmarkId,isFolder:isFolder}=target.dataset;removeFolderOrBookmark("true"==isFolder)(parseInt(bookmarkId)).then((()=>removeFromDOM(target.parentNode))).then((()=>removeFromDOM(dividerTarget))).then((()=>createImportInfo(isImportedFolder))).then(doBookmarkSync)}async function onDeleteBookmarkConfirm_fancytree(e,target){const isImportedFolder=["bookmark_folder","imported"].every((e=>target.classList.contains(e))),isCurrentBrowser=target.dataset&&target.dataset.browser===getBrowserName().toLowerCase();isImportedFolder&&isCurrentBrowser&&await storageLocalApi.removeItem(LAST_IMPORT_TIME);const{id:bookmarkId,isFolder:isFolder}=target.dataset;removeFolderOrBookmark("true"==isFolder)(parseInt(bookmarkId)).then((()=>createImportInfo(isImportedFolder))).then(doBookmarkSync)}const removeFolderOrBookmark=folder=>folder?removeFolder:invalidateBookmark;function removeFromDOM(target){target&&target.parentNode&&target.parentNode.removeChild(target),0==bookmarkDataContainer.childElementCount&&syncingBookmarkText(NO_BOOKMARKS),0==tabsyncDataContainer.childElementCount&&syncingTabText(NO_TABS)}function createImportInfo(isImportedFolder){if(!isImportedFolder)return;bookmarkImportFolder.innerHTML="";const importAvailableText=h("div",{},[h("div",{class:"bookmark-text-import",click:e=>{e.currentTarget.classList.contains("syncing")||(document.dispatchEvent(new CustomEvent("analytics",{detail:{action:"IMPORT_BUTTON",event:e}})),e.stopPropagation(),triggerImport(),switchImportButton(!1))}},[h("img",{class:"import-info-img",src:"assets/img/ic_info.png"}),h("span",{},chrome.i18n.getMessage("IMPORT_INFO",[getBrowserName()])),h("img",{src:"assets/img/ic_info_arrow.png"})]),h("hr",{class:"divider-chrome-folder"})]);bookmarkImportFolder.appendChild(importAvailableText)}function invalidateBookmark(_ID){return DB.Update.bookmarks({newData:{DIRTY:1,IS_DELETED:"1",SYNC5:0},where:{equals:[{key:"_ID",value:_ID}]}})}function removeBookmarkChildren(result){const removePromises=Array.from(result).map((({_ID:_ID,FOLDER:FOLDER})=>removeFolderOrBookmark(FOLDER)(_ID)));return Promise.all(removePromises)}function removeFolder(_ID){return new Promise(((resolve,reject)=>{DB.Query.bookmarks({selection:["_ID","FOLDER"],where:{equals:[{key:"PARENT",value:_ID}]}}).then(removeBookmarkChildren).then(invalidateBookmark(_ID)).then(resolve)}))}function onDeleteMultiBookmarkConfirm_fancytree(bookmarks){removeBookmarkChildren(bookmarks).then(doBookmarkSync())}async function onPasteBookmarks_fancytree(selectedBookmarks,parent){let bookmarks=[];const checkSimilarPromises=Array.from(selectedBookmarks).map((item=>{let bookmark={id:item.data.id,parent:parent,title:item.title,url:item.data.url,isFolder:item.folder};return bookmarks.push(bookmark),checkSimilarBookmark(bookmark)}));if((await Promise.all(checkSimilarPromises)).some((value=>value))){var options={body:BOOKMARK_EXISTS,icon:"assets/img/logo48x48.png"};const not=new Notification("",options);return void setTimeout(not.close.bind(not),3e3)}const pasteBookmarks=Array.from(bookmarks).map((bookmark=>{updateBookmark(bookmark)}));await Promise.all(pasteBookmarks),pasteBookmarksCallBack(parent),doBookmarkSync()}async function onPasteCopiedBookmarks(selectedBookmarks,parent){let bookmarks=[];const checkSimilarPromises=Array.from(selectedBookmarks).map((item=>{let bookmark={parent:parent,title:item.title,url:item.data.url,isFolder:item.folder};return bookmarks.push(bookmark),checkSimilarBookmark(bookmark)}));if((await Promise.all(checkSimilarPromises)).some((value=>value))){var options={body:BOOKMARK_EXISTS,icon:"assets/img/logo48x48.png"};const not=new Notification("",options);return void setTimeout(not.close.bind(not),3e3)}const copyBookmarks=Array.from(bookmarks).map((bookmark=>addBookmark(bookmark)));await Promise.all(copyBookmarks),pasteCopiedBookmarksCallBack(parent),doBookmarkSync()}function onEditClick(e,target){const{id:id,parentId:parent,title:title,isFolder:isFolder=!1,url:url,dominantColor:dominantColor=0,targetNode:targetNode}=target.dataset;e.data={id:parseInt(id),parent:parseInt(parent),title:title,isFolder:"true"==isFolder},"true"!=isFolder&&(e.data.url=url,e.data.dominantColor=parseInt(dominantColor)),EditModal.bookmark={id:id,parent:parent,isFolder:"true"===isFolder,url:url,title:title},EditModal.targetNode=targetNode,EditModal.toggle()}function doBookmarkSync(){isBookmarkSyncOn()?chrome.runtime.sendMessage({BUTTON:"BOOKMARK_SYNC"}):renderBookmarks()}