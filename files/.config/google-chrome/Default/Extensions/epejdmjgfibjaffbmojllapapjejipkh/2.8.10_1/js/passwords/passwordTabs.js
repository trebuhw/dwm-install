function FramePasswordInterface(frame){this.frameId=frame.frameId,this.url=frame.url,this.origin=frame.origin,this.documentId=frame.documentId,this.hasLoginForm=!1}function TabPasswordInterface(tab){this.tab=tab;try{this.origin=new URL(tab.url).origin}catch(error){console.log(error)}this.origin&&this.origin.length&&"/"!=this.origin[this.origin.length-1]&&(this.origin=this.origin+"/"),this.frames={},this.noticeTimeout=0,this.noticeTimeoutMiliSec=500,this.curCredential=new Credential({}),this.credentials=null,this.promoteCounted=!1}function PasswordTabsInfos(){this.init(),this.enabled=!0,storageLocalApi.waitForAvailable().then((()=>{this.updateStatus("DISABLED"!=storageLocalApi.getItem("PASSWORD_SYNC"))})),chrome.tabs.onUpdated.addListener(this.onTabUpdated.bind(this)),chrome.tabs.onCreated.addListener(this.onTabCreated.bind(this)),chrome.tabs.onRemoved.addListener(this.onTabRemoved.bind(this)),chrome.tabs.onActivated.addListener(this.onTabActivated.bind(this))}SamsungSCloudSyncService.passwordTabsGlobal=null,FramePasswordInterface.prototype={update(frame){this.url=frame.url||this.url,this.origin=frame.origin||this.origin,this.documentId=frame.documentId||this.documentId},setHasLogin(value){this.hasLoginForm=value}},TabPasswordInterface.prototype={getRandomNumber:(min,max)=>Math.random()*(max-min)+min,hasLoginForm(){let result=!1;return Object.keys(this.frames).forEach((key=>{this.frames[key].hasLoginForm&&(result=!0)})),result},getAllOriginFrame(){const origins=[];return Object.keys(this.frames).forEach((key=>{origins.indexOf(this.frames[key].origin)<0&&origins.push(this.frames[key].origin)})),origins},getCredentialAfterReconnected(){this.getCredentialFromPc()},getCredentialFromPc(){SamsungSCloudSyncService.passwordService.getCredentials({hostUrl:this.origin},this.onGgetCredentialFromPc.bind(this))},onGgetCredentialFromPc(result){200==result.code&&(this.credentials=result.data&&result.data.credentials&&result.data.credentials.length?result.data.credentials.map((credential=>new Credential(credential))):[],SamsungSCloudSyncService.passwordBackgroundGlobal.sendCredentialToContent(this.tab.id,{origin:this.origin}))},generateRandomCredential(){return new Credential({username:Math.random().toString(36).substring(this.getRandomNumber(2,7)),password:Math.random().toString(36).substring(this.getRandomNumber(2,7)),name:Math.random().toString(36).substring(this.getRandomNumber(2,7)),url:this.origin})},update(tab){this.tab=tab,this.origin=new URL(tab.url).origin,this.origin&&this.origin.length&&"/"!=this.origin[this.origin.length-1]&&(this.origin=this.origin+"/"),this.credentials=null},updateFrame(frame,data){this.frames[frame.frameId]?this.frames[frame.frameId].update(frame):this.frames[frame.frameId]=new FramePasswordInterface(frame),data?(this.frames[frame.frameId].setHasLogin(!0),this.curCredential.update(Object.assign({},data,{hostUrl:this.origin})),SamsungSCloudSyncService.passwordBackgroundGlobal.sendCredentialToContent(this.tab.id,{origin:frame.origin})):(this.frames[frame.frameId].setHasLogin(!1),this.checkToShowNotice()),this.hasLoginForm()&&chrome.tabs.sendMessage(this.tab.id,{cmd:"CLOSE_SAVE_PASSWORD_NOTIFICATION"})},clearFrameInfo(forceClearCredential){try{chrome.webNavigation.getAllFrames({tabId:this.tab.id},(frames=>{const ids=frames.map((frame=>frame.frameId));Object.keys(this.frames).forEach((key=>{ids.indexOf(key)<0&&delete this.frames[key],forceClearCredential&&this.frames[key]&&this.frames[key].setHasLogin(!1)}))}))}catch(error){console.log(error)}},removePcCredential(){this.credentials=null},checkToShowNotice(){if(this.hasLoginForm())this.clearFrameInfo();else if(SamsungSCloudSyncService.PassLogs.log("No login form"),this.curCredential.isValidCredential())if(SamsungSCloudSyncService.PassLogs.log(`credential: ${JSON.stringify(this.curCredential)}`),SamsungSCloudSyncService.passwordService.status==PASS_APP_STATUS.SECURED){SamsungSCloudSyncService.PassLogs.log("Has Credential");const hostUrl=this.curCredential.hostUrl;SamsungSCloudSyncService.passwordService.getCredentials({hostUrl:hostUrl},(result=>{if(200==result.code){const credentials=result.data.credentials&&result.data.credentials.length?result.data.credentials.map((credential=>new Credential(credential))):[];let filterCredentials=credentials&&credentials.length?credentials.filter((cre=>cre.username===this.curCredential.username)):[];filterCredentials.length>1&&(filterCredentials=filterCredentials.filter((cre=>cre.hostUrl===this.curCredential.hostUrl))),0==filterCredentials.length&&this.curCredential.isValidCredential()?(SamsungSCloudSyncService.PassLogs.log("New Credential"),SamsungSCloudSyncService.passwordService.isExcludedWebsite(hostUrl,(result=>{if(200==result.code&&result.data&&result.data.isExcludedHostUrl)return this.curCredential=new Credential({}),void SamsungSCloudSyncService.passwordTabsGlobal.tabs[this.tab.id].clearFrameInfo();this.curCredential.isValidCredential()&&chrome.tabs.sendMessage(this.tab.id,{cmd:"OPEN_SAVE_PASSWORD_NOTIFICATION",data:this.curCredential})}))):filterCredentials[0]&&this.curCredential.password!==filterCredentials[0].password&&(SamsungSCloudSyncService.PassLogs.log("Update Credential"),this.curCredential.update({hostUrl:filterCredentials[0].hostUrl}),this.curCredential.isValidCredential()&&chrome.tabs.sendMessage(this.tab.id,{cmd:"OPEN_UPDATE_PASSWORD_NOTIFICATION",data:this.curCredential}))}}))}else this.clearFrameInfo()}},PasswordTabsInfos.prototype={init(){this.tabs={},chrome.tabs.query({},(tabs=>{tabs.forEach((tab=>{this.tabs[tab.id]=new TabPasswordInterface(tab),tab.active&&(this.activeTabId=tab.id,this.tabs[tab.id].getCredentialAfterReconnected())}))}))},updateStatus(enabled){this.enabled!=enabled&&(this.enabled=enabled)},onTabCreated(tab){this.tabs[tab.id]=new TabPasswordInterface(tab)},onTabUpdated(tabId,changeInfo,tab){"complete"===changeInfo.status&&this.tabs[tabId]&&(this.tabs[tabId].update(tab),this.tabs[tabId].getCredentialAfterReconnected(),this.tabs[tabId].origin&&0==this.tabs[tabId].origin.indexOf("http")&&SamsungSCloudSyncService.passwordService.status==PASS_APP_STATUS.NOT_INSTALLED&&SamsungSCloudSyncService.passwordService.checkPassAppSignedIn())},onTabRemoved(tab,removeInfo){delete this.tabs[tab.id]},onTabActivated({tabId:tabId,windowId:windowId}){this.activeTabId=tabId,this.tabs[tabId].getCredentialAfterReconnected()},getCredential(tabId){return this.tabs[tabId].curCredential},getCredentialFromPc(){this.init()},removePcCredentials(){Object.keys(this.tabs).forEach((key=>{this.tabs[key].removePcCredential()}))}},SamsungSCloudSyncService.passwordTabsGlobal=new PasswordTabsInfos;